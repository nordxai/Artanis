{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Artanis Framework","text":"<p>A lightweight, minimalist ASGI web framework for Python built with simplicity and performance in mind.</p> <p> </p> <p>Artanis provides a clean, intuitive API for building modern web applications and APIs using named routes and a powerful middleware system.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"\ud83d\ude80 Simple &amp; Fast\ud83d\uddc2\ufe0f Advanced Routing\ud83d\udd27 Powerful Middleware\ud83d\udce1 Event System <ul> <li>Named Routes: Clean <code>app.get(path, handler)</code> and <code>app.post(path, handler)</code> syntax</li> <li>Zero Dependencies: Uses only Python standard library for maximum compatibility</li> <li>ASGI Compliant: Works with Uvicorn, Hypercorn, and other ASGI servers</li> <li>Type Safe: Full type annotation support with mypy compatibility</li> </ul> <ul> <li>Path Parameters: Dynamic segments like <code>/users/{user_id}</code></li> <li>Multiple HTTP Methods: GET, POST, PUT, DELETE, PATCH, OPTIONS on the same path</li> <li>Subrouting: Mount routers at specific paths for modular applications</li> <li>Parameterized Mounts: Dynamic subrouter mounting at paths like <code>/users/{user_id}</code></li> </ul> <ul> <li>Express-Style: Intuitive <code>app.use()</code> API for middleware</li> <li>Path-Based: Apply middleware to specific routes or paths</li> <li>Security Built-in: CORS, CSP, HSTS, rate limiting, security headers</li> <li>Request Logging: Structured logging with automatic request tracking</li> </ul> <ul> <li>Extensible Events: Custom business events with priority execution</li> <li>ASGI Lifecycle: Automatic startup and shutdown event handling</li> <li>Event Middleware: Cross-cutting concerns for all events</li> <li>Conditional Handlers: Execute only when specific conditions are met</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from artanis import App\n\napp = App()\n\n# Simple route\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n\napp.get(\"/\", hello)\n\n# Route with path parameter\nasync def get_user(user_id):\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n\napp.get(\"/users/{user_id}\", get_user)\n\n# POST route with request body\nasync def create_user(request):\n    data = await request.json()\n    return {\"message\": \"User created\", \"data\": data}\n\napp.post(\"/users\", create_user)\n</code></pre>"},{"location":"#why-choose-artanis","title":"Why Choose Artanis?","text":"<p>Perfect for Modern Python Development</p> <ul> <li>\ud83d\udc0d Python 3.8+: Built for modern Python with async/await support</li> <li>\ud83d\udce6 Zero Dependencies: No external runtime dependencies to manage</li> <li>\ud83d\udd12 Security First: Comprehensive security middleware included</li> <li>\ud83d\udcd6 Excellent Documentation: Detailed guides, tutorials, and API reference</li> <li>\ud83e\uddea Well Tested: 191+ comprehensive tests ensuring reliability</li> </ul>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li> <p>:material-rocket-launch:{ .lg .middle } Get Started</p> <p>Install Artanis and build your first application in minutes</p> <p>:octicons-arrow-right-24: Quick Start</p> </li> <li> <p>:material-book-open:{ .lg .middle } Learn the Basics</p> <p>Follow our comprehensive tutorial to build a complete blog API</p> <p>:octicons-arrow-right-24: Tutorial</p> </li> <li> <p>:material-api:{ .lg .middle } API Reference</p> <p>Explore the complete API documentation with examples</p> <p>:octicons-arrow-right-24: API Docs</p> </li> <li> <p>:material-code-braces:{ .lg .middle } Examples</p> <p>See working examples for common patterns and use cases</p> <p>:octicons-arrow-right-24: Examples</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Repository: nordxai/Artanis</li> <li>Issues &amp; Bug Reports: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>PyPI Package: artanis</li> </ul>"},{"location":"#license","title":"License","text":"<p>Artanis is open source software released under an open source license. Feel free to use, modify, and distribute.</p>"},{"location":"api/core/app/","title":"App Class","text":"<p>The <code>App</code> class is the core of any Artanis application. It handles route registration, middleware management, and ASGI request processing.</p>"},{"location":"api/core/app/#artanis.application.App","title":"App","text":"<pre><code>App(enable_request_logging: bool = True)\n</code></pre> <p>Main Artanis application class.</p> <p>The core application class that handles route registration, middleware management, and ASGI request processing. Provides an Express.js-inspired API for building web applications.</p> <p>Parameters:</p> Name Type Description Default <code>enable_request_logging</code> <code>bool</code> <p>Whether to enable automatic request logging</p> <code>True</code> <p>Attributes:</p> Name Type Description <code>router</code> <p>Router instance for handling routes</p> <code>middleware_manager</code> <p>Manages global and path-based middleware</p> <code>middleware_executor</code> <p>Executes middleware chains</p> <code>event_manager</code> <p>Manages application events and handlers</p> <code>logger</code> <p>Application logger instance</p> Example <pre><code>from artanis import App\n\napp = App()\n\nasync def hello(name: str):\n    return {'message': f'Hello, {name}!'}\n\napp.get('/hello/{name}', hello)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def __init__(self, enable_request_logging: bool = True) -&gt; None:\n    self.router = Router()\n    self.middleware_manager = MiddlewareManager()\n    self.middleware_executor = MiddlewareExecutor(self.middleware_manager)\n    self.event_manager = EventManager()\n    self.logger = logger\n\n    # OpenAPI integration\n    self._openapi_spec: Any | None = None\n    self._openapi_docs_manager: Any | None = None\n\n    # Add request logging middleware by default\n    if enable_request_logging:\n        self.use(RequestLoggingMiddleware())\n</code></pre>"},{"location":"api/core/app/#artanis.application.App-attributes","title":"Attributes","text":""},{"location":"api/core/app/#artanis.application.App.global_middleware","title":"global_middleware  <code>property</code>","text":"<pre><code>global_middleware: list[Callable[..., Any]]\n</code></pre> <p>Get global middleware list.</p> <p>Returns:</p> Type Description <code>list[Callable[..., Any]]</code> <p>List of global middleware functions</p>"},{"location":"api/core/app/#artanis.application.App.path_middleware","title":"path_middleware  <code>property</code>","text":"<pre><code>path_middleware: dict[str, list[Callable[..., Any]]]\n</code></pre> <p>Get path-based middleware dictionary.</p> <p>Returns:</p> Type Description <code>dict[str, list[Callable[..., Any]]]</code> <p>Dictionary mapping paths to middleware lists</p>"},{"location":"api/core/app/#artanis.application.App.routes","title":"routes  <code>property</code>","text":"<pre><code>routes: list[dict[str, Any]]\n</code></pre> <p>Get all registered routes.</p> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of all registered route dictionaries</p>"},{"location":"api/core/app/#artanis.application.App-functions","title":"Functions","text":""},{"location":"api/core/app/#artanis.application.App.__call__","title":"__call__  <code>async</code>","text":"<pre><code>__call__(\n    scope: dict[str, Any],\n    receive: Callable[..., Any],\n    send: Callable[..., Any],\n) -&gt; None\n</code></pre> <p>ASGI application entry point.</p> <p>Handles incoming HTTP requests and ASGI lifespan events.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>dict[str, Any]</code> <p>ASGI scope dictionary</p> required <code>receive</code> <code>Callable[..., Any]</code> <p>ASGI receive callable</p> required <code>send</code> <code>Callable[..., Any]</code> <p>ASGI send callable</p> required Source code in <code>artanis/application.py</code> <pre><code>async def __call__(  # noqa: PLR0915\n    self,\n    scope: dict[str, Any],\n    receive: Callable[..., Any],\n    send: Callable[..., Any],\n) -&gt; None:\n    \"\"\"ASGI application entry point.\n\n    Handles incoming HTTP requests and ASGI lifespan events.\n\n    Args:\n        scope: ASGI scope dictionary\n        receive: ASGI receive callable\n        send: ASGI send callable\n    \"\"\"\n    if scope[\"type\"] == \"lifespan\":\n        await self._handle_lifespan(scope, receive, send)\n        return\n    if scope[\"type\"] != \"http\":\n        return\n\n    method = scope[\"method\"]\n    path = scope[\"path\"]\n\n    # Create request and response objects\n    request = Request(scope, receive)\n    response = Response()\n\n    # Find route and extract path params BEFORE middleware execution\n    route, path_params = self._find_route(method, path)\n\n    # Add path params to request for middleware access\n    request.path_params = path_params\n\n    # Define the final handler (route handler)\n    async def final_handler(req: Any) -&gt; Any:\n        if route:\n            try:\n                response_data = await call_handler(\n                    route[\"handler\"], path_params, req, route\n                )\n                if not response.is_finished():\n                    # Check if handler has content type hint\n                    handler = route[\"handler\"]\n                    if hasattr(handler, \"_artanis_content_type\"):\n                        content_type = handler._artanis_content_type  # noqa: SLF001\n                        if content_type == \"text/html\":\n                            response.body = response_data\n                            response.set_header(\"Content-Type\", \"text/html\")\n                        elif content_type == \"application/json\":\n                            response.body = response_data\n                            response.set_header(\"Content-Type\", \"application/json\")\n                        else:\n                            response.json(response_data)\n                    else:\n                        response.json(response_data)\n                return response\n            except HandlerError as e:\n                self.logger.exception(\n                    f\"Handler error in {route['method']} {route['path']}: {e!s}\"\n                )\n                if not response.is_finished():\n                    response.set_status(e.status_code)\n                    response.json(e.to_dict())\n                return response\n            except Exception as e:\n                self.logger.exception(\n                    f\"Unexpected error in {route['method']} {route['path']}: {e!s}\"\n                )\n                if not response.is_finished():\n                    response.set_status(500)\n                    response.json({\"error\": \"Internal Server Error\"})\n                return response\n        else:\n            path_exists, allowed_methods = self._path_exists_with_different_method(\n                path\n            )\n            if path_exists:\n                method_error = MethodNotAllowed(path, method, allowed_methods)\n                response.set_status(method_error.status_code)\n                response.json(method_error.to_dict())\n            else:\n                route_error = RouteNotFound(path, method)\n                response.set_status(route_error.status_code)\n                response.json(route_error.to_dict())\n            return response\n\n    try:\n        # Execute middleware chain\n        await self.middleware_executor.execute_with_error_handling(\n            request, response, path, final_handler\n        )\n\n        # Send response\n        await send_response(send, response)\n\n    except Exception as e:\n        self.logger.exception(f\"Unhandled error: {e!s}\")\n        await send_error_response(send, 500, \"Internal Server Error\")\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.add_event_handler","title":"add_event_handler","text":"<pre><code>add_event_handler(\n    event_name: str,\n    handler: Callable[..., Any],\n    priority: int = 0,\n    condition: Callable[..., bool] | None = None,\n) -&gt; None\n</code></pre> <p>Register an event handler.</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>Name of the event to handle (e.g., 'startup', 'shutdown', or custom)</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Function to call when event is triggered</p> required <code>priority</code> <code>int</code> <p>Execution priority (higher numbers run first)</p> <code>0</code> <code>condition</code> <code>Callable[..., bool] | None</code> <p>Optional condition function to determine if handler should run</p> <code>None</code> <p>Examples:</p> <pre><code># Built-in lifecycle events\napp.add_event_handler(\"startup\", setup_database)\napp.add_event_handler(\"shutdown\", cleanup_database)\n\n# Custom events\napp.add_event_handler(\"user_registered\", send_welcome_email)\napp.add_event_handler(\"payment_processed\", update_inventory, priority=10)\n\n# Conditional handlers\napp.add_event_handler(\"order_placed\",\n                    send_notification,\n                    condition=lambda data: data.get(\"urgent\", False))\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def add_event_handler(\n    self,\n    event_name: str,\n    handler: Callable[..., Any],\n    priority: int = 0,\n    condition: Callable[..., bool] | None = None,\n) -&gt; None:\n    \"\"\"Register an event handler.\n\n    Args:\n        event_name: Name of the event to handle (e.g., 'startup', 'shutdown', or custom)\n        handler: Function to call when event is triggered\n        priority: Execution priority (higher numbers run first)\n        condition: Optional condition function to determine if handler should run\n\n    Examples:\n        ```python\n        # Built-in lifecycle events\n        app.add_event_handler(\"startup\", setup_database)\n        app.add_event_handler(\"shutdown\", cleanup_database)\n\n        # Custom events\n        app.add_event_handler(\"user_registered\", send_welcome_email)\n        app.add_event_handler(\"payment_processed\", update_inventory, priority=10)\n\n        # Conditional handlers\n        app.add_event_handler(\"order_placed\",\n                            send_notification,\n                            condition=lambda data: data.get(\"urgent\", False))\n        ```\n    \"\"\"\n    self.event_manager.add_handler(event_name, handler, priority, condition)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.add_event_middleware","title":"add_event_middleware","text":"<pre><code>add_event_middleware(\n    middleware: Callable[..., Any],\n) -&gt; None\n</code></pre> <p>Add middleware that runs for all events.</p> <p>Parameters:</p> Name Type Description Default <code>middleware</code> <code>Callable[..., Any]</code> <p>Function that will be called for every event</p> required Example <pre><code>async def event_logger(event_context):\n    print(f\"Event: {event_context.name} at {event_context.timestamp}\")\n\napp.add_event_middleware(event_logger)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def add_event_middleware(self, middleware: Callable[..., Any]) -&gt; None:\n    \"\"\"Add middleware that runs for all events.\n\n    Args:\n        middleware: Function that will be called for every event\n\n    Example:\n        ```python\n        async def event_logger(event_context):\n            print(f\"Event: {event_context.name} at {event_context.timestamp}\")\n\n        app.add_event_middleware(event_logger)\n        ```\n    \"\"\"\n    self.event_manager.add_event_middleware(middleware)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.add_openapi_metadata","title":"add_openapi_metadata","text":"<pre><code>add_openapi_metadata(\n    title: str | None = None,\n    version: str | None = None,\n    description: str | None = None,\n    servers: list[dict[str, str]] | None = None,\n    tags: list[dict[str, str]] | None = None,\n    security_schemes: dict[str, dict[str, Any]]\n    | None = None,\n) -&gt; None\n</code></pre> <p>Add metadata to OpenAPI specification.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str | None</code> <p>API title</p> <code>None</code> <code>version</code> <code>str | None</code> <p>API version</p> <code>None</code> <code>description</code> <code>str | None</code> <p>API description</p> <code>None</code> <code>servers</code> <code>list[dict[str, str]] | None</code> <p>List of server objects</p> <code>None</code> <code>tags</code> <code>list[dict[str, str]] | None</code> <p>List of tag objects</p> <code>None</code> <code>security_schemes</code> <code>dict[str, dict[str, Any]] | None</code> <p>Security scheme definitions</p> <code>None</code> Example <pre><code>app.add_openapi_metadata(\n    title=\"My API\",\n    version=\"2.0.0\",\n    description=\"A comprehensive REST API\",\n    servers=[\n        {\"url\": \"https://api.example.com\", \"description\": \"Production\"},\n        {\"url\": \"https://staging-api.example.com\", \"description\": \"Staging\"}\n    ],\n    tags=[\n        {\"name\": \"users\", \"description\": \"User operations\"},\n        {\"name\": \"auth\", \"description\": \"Authentication\"}\n    ],\n    security_schemes={\n        \"bearer\": {\n            \"type\": \"http\",\n            \"scheme\": \"bearer\",\n            \"bearerFormat\": \"JWT\"\n        }\n    }\n)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def add_openapi_metadata(\n    self,\n    title: str | None = None,\n    version: str | None = None,\n    description: str | None = None,\n    servers: list[dict[str, str]] | None = None,\n    tags: list[dict[str, str]] | None = None,\n    security_schemes: dict[str, dict[str, Any]] | None = None,\n) -&gt; None:\n    \"\"\"Add metadata to OpenAPI specification.\n\n    Args:\n        title: API title\n        version: API version\n        description: API description\n        servers: List of server objects\n        tags: List of tag objects\n        security_schemes: Security scheme definitions\n\n    Example:\n        ```python\n        app.add_openapi_metadata(\n            title=\"My API\",\n            version=\"2.0.0\",\n            description=\"A comprehensive REST API\",\n            servers=[\n                {\"url\": \"https://api.example.com\", \"description\": \"Production\"},\n                {\"url\": \"https://staging-api.example.com\", \"description\": \"Staging\"}\n            ],\n            tags=[\n                {\"name\": \"users\", \"description\": \"User operations\"},\n                {\"name\": \"auth\", \"description\": \"Authentication\"}\n            ],\n            security_schemes={\n                \"bearer\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"bearer\",\n                    \"bearerFormat\": \"JWT\"\n                }\n            }\n        )\n        ```\n    \"\"\"\n    try:\n        from artanis.openapi import OpenAPISpec\n\n        # Create or update spec\n        if self._openapi_spec is None:\n            self._openapi_spec = OpenAPISpec(\n                title=title or \"Artanis API\",\n                version=version or \"1.0.0\",\n                description=description or \"API built with Artanis framework\",\n            )\n        else:\n            if title:\n                self._openapi_spec.title = title\n            if version:\n                self._openapi_spec.version = version\n            if description:\n                self._openapi_spec.description = description\n\n        # Add servers\n        if servers:\n            for server in servers:\n                self._openapi_spec.add_server(\n                    server[\"url\"], server.get(\"description\", \"\")\n                )\n\n        # Add tags\n        if tags:\n            for tag in tags:\n                self._openapi_spec.add_tag(tag[\"name\"], tag.get(\"description\", \"\"))\n\n        # Add security schemes\n        if security_schemes:\n            for name, scheme in security_schemes.items():\n                self._openapi_spec.add_security_scheme(\n                    name,\n                    scheme[\"type\"],\n                    **{k: v for k, v in scheme.items() if k != \"type\"},\n                )\n\n    except ImportError:\n        msg = (\n            \"OpenAPI functionality requires the openapi package. \"\n            \"Install with: pip install 'artanis[openapi]'\"\n        )\n        raise ImportError(msg)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.add_openapi_validation","title":"add_openapi_validation","text":"<pre><code>add_openapi_validation(\n    validate_requests: bool = True,\n    validate_responses: bool = False,\n    strict_mode: bool = False,\n) -&gt; None\n</code></pre> <p>Add OpenAPI request/response validation middleware.</p> <p>Parameters:</p> Name Type Description Default <code>validate_requests</code> <code>bool</code> <p>Whether to validate incoming requests</p> <code>True</code> <code>validate_responses</code> <code>bool</code> <p>Whether to validate outgoing responses</p> <code>False</code> <code>strict_mode</code> <code>bool</code> <p>Whether to enforce strict validation</p> <code>False</code> Example <pre><code># Basic request validation\napp.add_openapi_validation()\n\n# Strict validation for both requests and responses\napp.add_openapi_validation(\n    validate_requests=True,\n    validate_responses=True,\n    strict_mode=True\n)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def add_openapi_validation(\n    self,\n    validate_requests: bool = True,\n    validate_responses: bool = False,\n    strict_mode: bool = False,\n) -&gt; None:\n    \"\"\"Add OpenAPI request/response validation middleware.\n\n    Args:\n        validate_requests: Whether to validate incoming requests\n        validate_responses: Whether to validate outgoing responses\n        strict_mode: Whether to enforce strict validation\n\n    Example:\n        ```python\n        # Basic request validation\n        app.add_openapi_validation()\n\n        # Strict validation for both requests and responses\n        app.add_openapi_validation(\n            validate_requests=True,\n            validate_responses=True,\n            strict_mode=True\n        )\n        ```\n    \"\"\"\n    try:\n        from artanis.openapi import OpenAPIGenerator, ValidationMiddleware\n\n        # Generate spec if not exists\n        if self._openapi_spec is None:\n            generator = OpenAPIGenerator()\n            self._openapi_spec = generator.generate_spec(self)\n\n        # Add validation middleware\n        validation_middleware = ValidationMiddleware(\n            self._openapi_spec,\n            validate_requests=validate_requests,\n            validate_responses=validate_responses,\n            strict_mode=strict_mode,\n        )\n\n        self.use(validation_middleware)\n\n        self.logger.info(\"OpenAPI validation middleware enabled\")\n        if validate_requests:\n            self.logger.info(\"  Request validation: enabled\")\n        if validate_responses:\n            self.logger.info(\"  Response validation: enabled\")\n        if strict_mode:\n            self.logger.info(\"  Strict mode: enabled\")\n\n    except ImportError:\n        msg = (\n            \"OpenAPI functionality requires the openapi package. \"\n            \"Install with: pip install 'artanis[openapi]'\"\n        )\n        raise ImportError(msg)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.all","title":"all","text":"<pre><code>all(path: str, handler: Callable[..., Any]) -&gt; None\n</code></pre> <p>Register a route that responds to all HTTP methods.</p> <p>This registers the handler for all standard HTTP methods (GET, POST, PUT, DELETE, PATCH, OPTIONS).</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required Example <pre><code># Authentication middleware for all methods\ndef authenticate(request, user_id):\n    # Check authentication for any HTTP method\n    return {\"user_id\": user_id, \"authenticated\": True}\n\napp.all(\"/admin/{user_id}\", authenticate)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def all(self, path: str, handler: Callable[..., Any]) -&gt; None:\n    \"\"\"Register a route that responds to all HTTP methods.\n\n    This registers the handler for all standard HTTP methods\n    (GET, POST, PUT, DELETE, PATCH, OPTIONS).\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n\n    Example:\n        ```python\n        # Authentication middleware for all methods\n        def authenticate(request, user_id):\n            # Check authentication for any HTTP method\n            return {\"user_id\": user_id, \"authenticated\": True}\n\n        app.all(\"/admin/{user_id}\", authenticate)\n        ```\n    \"\"\"\n    self.router.all(path, handler)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.delete","title":"delete","text":"<pre><code>delete(path: str, handler: Callable[..., Any]) -&gt; None\n</code></pre> <p>Register a DELETE route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required Source code in <code>artanis/application.py</code> <pre><code>def delete(self, path: str, handler: Callable[..., Any]) -&gt; None:\n    \"\"\"Register a DELETE route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n    \"\"\"\n    self._register_route(\"DELETE\", path, handler)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.emit_event","title":"emit_event  <code>async</code>","text":"<pre><code>emit_event(\n    event_name: str,\n    data: Any = None,\n    source: str | None = None,\n    **metadata: Any,\n) -&gt; None\n</code></pre> <p>Trigger all handlers for an event.</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>Name of the event to trigger</p> required <code>data</code> <code>Any</code> <p>Data to pass to event handlers</p> <code>None</code> <code>source</code> <code>str | None</code> <p>Optional source identifier for the event</p> <code>None</code> <code>**metadata</code> <code>Any</code> <p>Additional metadata to include in event context</p> <code>{}</code> <p>Examples:</p> <pre><code># Trigger custom events\nawait app.emit_event(\"user_registered\", user_data)\nawait app.emit_event(\"payment_processed\", payment_data, source=\"stripe\")\nawait app.emit_event(\"order_completed\", order_data, urgent=True)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>async def emit_event(\n    self,\n    event_name: str,\n    data: Any = None,\n    source: str | None = None,\n    **metadata: Any,\n) -&gt; None:\n    \"\"\"Trigger all handlers for an event.\n\n    Args:\n        event_name: Name of the event to trigger\n        data: Data to pass to event handlers\n        source: Optional source identifier for the event\n        **metadata: Additional metadata to include in event context\n\n    Examples:\n        ```python\n        # Trigger custom events\n        await app.emit_event(\"user_registered\", user_data)\n        await app.emit_event(\"payment_processed\", payment_data, source=\"stripe\")\n        await app.emit_event(\"order_completed\", order_data, urgent=True)\n        ```\n    \"\"\"\n    await self.event_manager.emit_event(event_name, data, source, **metadata)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.export_openapi","title":"export_openapi","text":"<pre><code>export_openapi(\n    file_path: str,\n    format_type: str = \"json\",\n    auto_generate: bool = True,\n) -&gt; None\n</code></pre> <p>Export OpenAPI specification to a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path where to save the specification</p> required <code>format_type</code> <code>str</code> <p>Export format (\"json\" or \"yaml\")</p> <code>'json'</code> <code>auto_generate</code> <code>bool</code> <p>Whether to auto-generate spec if not exists</p> <code>True</code> Example <pre><code>app.export_openapi(\"api.json\")\napp.export_openapi(\"api.yaml\", format_type=\"yaml\")\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def export_openapi(\n    self,\n    file_path: str,\n    format_type: str = \"json\",\n    auto_generate: bool = True,\n) -&gt; None:\n    \"\"\"Export OpenAPI specification to a file.\n\n    Args:\n        file_path: Path where to save the specification\n        format_type: Export format (\"json\" or \"yaml\")\n        auto_generate: Whether to auto-generate spec if not exists\n\n    Example:\n        ```python\n        app.export_openapi(\"api.json\")\n        app.export_openapi(\"api.yaml\", format_type=\"yaml\")\n        ```\n    \"\"\"\n    try:\n        from artanis.openapi import OpenAPIGenerator\n\n        # Auto-generate spec if needed\n        if auto_generate and self._openapi_spec is None:\n            generator = OpenAPIGenerator()\n            self._openapi_spec = generator.generate_spec(self)\n\n        if self._openapi_spec is None:\n            msg = \"No OpenAPI specification available. Call generate_openapi_spec() first.\"\n            raise ValueError(msg)\n\n        # Export to file\n        from pathlib import Path\n\n        with Path(file_path).open(\"w\", encoding=\"utf-8\") as f:\n            if format_type.lower() == \"yaml\":\n                try:\n                    import yaml\n\n                    yaml.dump(\n                        self._openapi_spec.to_dict(), f, default_flow_style=False\n                    )\n                except ImportError:\n                    msg = \"YAML export requires PyYAML: pip install PyYAML\"\n                    raise ImportError(msg)\n            else:\n                f.write(self._openapi_spec.to_json())\n\n        self.logger.info(f\"OpenAPI specification exported to: {file_path}\")\n\n    except ImportError:\n        msg = (\n            \"OpenAPI functionality requires the openapi package. \"\n            \"Install with: pip install 'artanis[openapi]'\"\n        )\n        raise ImportError(msg)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.generate_openapi_spec","title":"generate_openapi_spec","text":"<pre><code>generate_openapi_spec(\n    title: str = \"Artanis API\",\n    version: str = \"1.0.0\",\n    description: str = \"API built with Artanis framework\",\n) -&gt; dict[str, Any]\n</code></pre> <p>Generate OpenAPI specification from registered routes.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>API title</p> <code>'Artanis API'</code> <code>version</code> <code>str</code> <p>API version</p> <code>'1.0.0'</code> <code>description</code> <code>str</code> <p>API description</p> <code>'API built with Artanis framework'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>OpenAPI specification dictionary</p> Example <pre><code>spec = app.generate_openapi_spec(\n    title=\"My API\",\n    version=\"2.0.0\",\n    description=\"A comprehensive REST API\"\n)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def generate_openapi_spec(\n    self,\n    title: str = \"Artanis API\",\n    version: str = \"1.0.0\",\n    description: str = \"API built with Artanis framework\",\n) -&gt; dict[str, Any]:\n    \"\"\"Generate OpenAPI specification from registered routes.\n\n    Args:\n        title: API title\n        version: API version\n        description: API description\n\n    Returns:\n        OpenAPI specification dictionary\n\n    Example:\n        ```python\n        spec = app.generate_openapi_spec(\n            title=\"My API\",\n            version=\"2.0.0\",\n            description=\"A comprehensive REST API\"\n        )\n        ```\n    \"\"\"\n    try:\n        from artanis.openapi import OpenAPIGenerator\n\n        generator = OpenAPIGenerator()\n        self._openapi_spec = generator.generate_spec(\n            self, title, version, description\n        )\n        return self._openapi_spec.to_dict()\n    except ImportError:\n        msg = (\n            \"OpenAPI functionality requires the openapi package. \"\n            \"Install with: pip install 'artanis[openapi]'\"\n        )\n        raise ImportError(msg)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.get","title":"get","text":"<pre><code>get(path: str, handler: Callable[..., Any]) -&gt; None\n</code></pre> <p>Register a GET route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required Source code in <code>artanis/application.py</code> <pre><code>def get(self, path: str, handler: Callable[..., Any]) -&gt; None:\n    \"\"\"Register a GET route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n    \"\"\"\n    self._register_route(\"GET\", path, handler)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.list_events","title":"list_events","text":"<pre><code>list_events() -&gt; list[str]\n</code></pre> <p>Get list of all registered event names.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of event names that have handlers</p> Example <pre><code>events = app.list_events()\nprint(f\"Registered events: {events}\")\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def list_events(self) -&gt; list[str]:\n    \"\"\"Get list of all registered event names.\n\n    Returns:\n        List of event names that have handlers\n\n    Example:\n        ```python\n        events = app.list_events()\n        print(f\"Registered events: {events}\")\n        ```\n    \"\"\"\n    return self.event_manager.list_events()\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.mount","title":"mount","text":"<pre><code>mount(path: str, router: Router) -&gt; None\n</code></pre> <p>Mount a subrouter at the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path prefix where the subrouter should be mounted</p> required <code>router</code> <code>Router</code> <p>Router instance to mount</p> required Example <pre><code>api_router = Router()\napi_router.get('/users', get_users)\napp.mount('/api', api_router)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def mount(self, path: str, router: Router) -&gt; None:\n    \"\"\"Mount a subrouter at the specified path.\n\n    Args:\n        path: Path prefix where the subrouter should be mounted\n        router: Router instance to mount\n\n    Example:\n        ```python\n        api_router = Router()\n        api_router.get('/users', get_users)\n        app.mount('/api', api_router)\n        ```\n    \"\"\"\n    self.router.mount(path, router)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.post","title":"post","text":"<pre><code>post(path: str, handler: Callable[..., Any]) -&gt; None\n</code></pre> <p>Register a POST route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required Source code in <code>artanis/application.py</code> <pre><code>def post(self, path: str, handler: Callable[..., Any]) -&gt; None:\n    \"\"\"Register a POST route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n    \"\"\"\n    self._register_route(\"POST\", path, handler)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.put","title":"put","text":"<pre><code>put(path: str, handler: Callable[..., Any]) -&gt; None\n</code></pre> <p>Register a PUT route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required Source code in <code>artanis/application.py</code> <pre><code>def put(self, path: str, handler: Callable[..., Any]) -&gt; None:\n    \"\"\"Register a PUT route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n    \"\"\"\n    self._register_route(\"PUT\", path, handler)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.remove_event_handler","title":"remove_event_handler","text":"<pre><code>remove_event_handler(\n    event_name: str, handler: Callable[..., Any]\n) -&gt; bool\n</code></pre> <p>Remove a specific event handler.</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>Name of the event</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Handler function to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if handler was found and removed, False otherwise</p> Example <pre><code>app.remove_event_handler(\"startup\", old_setup_function)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def remove_event_handler(\n    self, event_name: str, handler: Callable[..., Any]\n) -&gt; bool:\n    \"\"\"Remove a specific event handler.\n\n    Args:\n        event_name: Name of the event\n        handler: Handler function to remove\n\n    Returns:\n        True if handler was found and removed, False otherwise\n\n    Example:\n        ```python\n        app.remove_event_handler(\"startup\", old_setup_function)\n        ```\n    \"\"\"\n    return self.event_manager.remove_handler(event_name, handler)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.serve_docs","title":"serve_docs","text":"<pre><code>serve_docs(\n    docs_path: str = \"/docs\",\n    redoc_path: str = \"/redoc\",\n    openapi_path: str = \"/openapi.json\",\n    auto_generate: bool = True,\n) -&gt; None\n</code></pre> <p>Enable interactive API documentation endpoints.</p> <p>Parameters:</p> Name Type Description Default <code>docs_path</code> <code>str</code> <p>Path for Swagger UI documentation</p> <code>'/docs'</code> <code>redoc_path</code> <code>str</code> <p>Path for ReDoc documentation</p> <code>'/redoc'</code> <code>openapi_path</code> <code>str</code> <p>Path for OpenAPI JSON specification</p> <code>'/openapi.json'</code> <code>auto_generate</code> <code>bool</code> <p>Whether to auto-generate OpenAPI spec if not exists</p> <code>True</code> Example <pre><code>app.serve_docs()  # Enables /docs, /redoc, /openapi.json\n\n# Custom paths\napp.serve_docs(\n    docs_path=\"/api-docs\",\n    redoc_path=\"/api-redoc\",\n    openapi_path=\"/api/openapi.json\"\n)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def serve_docs(\n    self,\n    docs_path: str = \"/docs\",\n    redoc_path: str = \"/redoc\",\n    openapi_path: str = \"/openapi.json\",\n    auto_generate: bool = True,\n) -&gt; None:\n    \"\"\"Enable interactive API documentation endpoints.\n\n    Args:\n        docs_path: Path for Swagger UI documentation\n        redoc_path: Path for ReDoc documentation\n        openapi_path: Path for OpenAPI JSON specification\n        auto_generate: Whether to auto-generate OpenAPI spec if not exists\n\n    Example:\n        ```python\n        app.serve_docs()  # Enables /docs, /redoc, /openapi.json\n\n        # Custom paths\n        app.serve_docs(\n            docs_path=\"/api-docs\",\n            redoc_path=\"/api-redoc\",\n            openapi_path=\"/api/openapi.json\"\n        )\n        ```\n    \"\"\"\n    try:\n        from artanis.openapi import OpenAPIDocsManager, OpenAPIGenerator\n\n        # Auto-generate spec if needed\n        if auto_generate and self._openapi_spec is None:\n            generator = OpenAPIGenerator()\n            self._openapi_spec = generator.generate_spec(self)\n\n        if self._openapi_spec is None:\n            msg = \"No OpenAPI specification available. Call generate_openapi_spec() first.\"\n            raise ValueError(msg)\n\n        # Setup documentation manager\n        self._openapi_docs_manager = OpenAPIDocsManager(\n            self._openapi_spec,\n            docs_path=docs_path,\n            redoc_path=redoc_path,\n            openapi_path=openapi_path,\n        )\n\n        # Register documentation routes\n        self._openapi_docs_manager.setup_docs_routes(self)\n\n        self.logger.info(\"OpenAPI documentation enabled:\")\n        self.logger.info(f\"  Swagger UI: {docs_path}\")\n        self.logger.info(f\"  ReDoc UI: {redoc_path}\")\n        self.logger.info(f\"  OpenAPI JSON: {openapi_path}\")\n\n    except ImportError:\n        msg = (\n            \"OpenAPI functionality requires the openapi package. \"\n            \"Install with: pip install 'artanis[openapi]'\"\n        )\n        raise ImportError(msg)\n</code></pre>"},{"location":"api/core/app/#artanis.application.App.use","title":"use","text":"<pre><code>use(\n    path_or_middleware: str | Callable[..., Any],\n    middleware: Callable[..., Any] | None = None,\n) -&gt; None\n</code></pre> <p>Register middleware - Express style app.use() API.</p> <p>Register middleware either globally or for specific paths.</p> <p>Parameters:</p> Name Type Description Default <code>path_or_middleware</code> <code>str | Callable[..., Any]</code> <p>Either a path pattern (str) or middleware function</p> required <code>middleware</code> <code>Callable[..., Any] | None</code> <p>Middleware function (when first arg is a path)</p> <code>None</code> <p>Examples:</p> <pre><code># Global middleware\napp.use(cors_middleware)\n\n# Path-specific middleware\napp.use('/api', auth_middleware)\n</code></pre> Source code in <code>artanis/application.py</code> <pre><code>def use(\n    self,\n    path_or_middleware: str | Callable[..., Any],\n    middleware: Callable[..., Any] | None = None,\n) -&gt; None:\n    \"\"\"Register middleware - Express style app.use() API.\n\n    Register middleware either globally or for specific paths.\n\n    Args:\n        path_or_middleware: Either a path pattern (str) or middleware function\n        middleware: Middleware function (when first arg is a path)\n\n    Examples:\n        ```python\n        # Global middleware\n        app.use(cors_middleware)\n\n        # Path-specific middleware\n        app.use('/api', auth_middleware)\n        ```\n    \"\"\"\n    if middleware is None:\n        # app.use(middleware_func) - Global middleware\n        if callable(path_or_middleware):\n            self.middleware_manager.add_global(path_or_middleware)\n    # app.use(\"/path\", middleware_func) - Path-based middleware\n    elif isinstance(path_or_middleware, str):\n        self.middleware_manager.add_path(path_or_middleware, middleware)\n</code></pre>"},{"location":"api/core/request/","title":"Request Class","text":"<p>The <code>Request</code> class provides access to HTTP request data including headers, body, and path parameters.</p>"},{"location":"api/core/request/#artanis.request.Request","title":"Request","text":"<pre><code>Request(\n    scope: dict[str, Any],\n    receive: Callable[[], Awaitable[dict[str, Any]]],\n)\n</code></pre> <p>HTTP request object providing access to request data.</p> <p>This class encapsulates the ASGI scope and receive callable to provide a convenient interface for accessing request data including headers, body content, and path parameters.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>dict[str, Any]</code> <p>ASGI scope dictionary containing request metadata</p> required <code>receive</code> <code>Callable[[], Awaitable[dict[str, Any]]]</code> <p>ASGI receive callable for getting request body</p> required <p>Attributes:</p> Name Type Description <code>scope</code> <p>The ASGI scope dictionary</p> <code>receive</code> <p>The ASGI receive callable</p> <code>path_params</code> <code>dict[str, str]</code> <p>Dictionary of extracted path parameters</p> <code>headers</code> <code>dict[str, str]</code> <p>Dictionary of request headers</p> Source code in <code>artanis/request.py</code> <pre><code>def __init__(\n    self, scope: dict[str, Any], receive: Callable[[], Awaitable[dict[str, Any]]]\n) -&gt; None:\n    self.scope = scope\n    self.receive = receive\n    self._body: bytes | None = None\n    self.path_params: dict[\n        str, str\n    ] = {}  # For middleware access to path parameters\n    # Convert ASGI headers (list of byte tuples) to string dict\n    raw_headers = scope.get(\"headers\", [])\n    self.headers: dict[str, str] = {\n        name.decode().lower(): value.decode() for name, value in raw_headers\n    }\n</code></pre>"},{"location":"api/core/request/#artanis.request.Request-functions","title":"Functions","text":""},{"location":"api/core/request/#artanis.request.Request.body","title":"body  <code>async</code>","text":"<pre><code>body() -&gt; bytes\n</code></pre> <p>Get the request body as bytes.</p> <p>Reads and caches the complete request body from the ASGI receive callable. The body is cached after the first call to avoid multiple reads.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>The complete request body as bytes</p> Source code in <code>artanis/request.py</code> <pre><code>async def body(self) -&gt; bytes:\n    \"\"\"Get the request body as bytes.\n\n    Reads and caches the complete request body from the ASGI receive callable.\n    The body is cached after the first call to avoid multiple reads.\n\n    Returns:\n        The complete request body as bytes\n    \"\"\"\n    if self._body is None:\n        body_parts = []\n        while True:\n            message = await self.receive()\n            if message[\"type\"] == \"http.request\":\n                body_parts.append(message.get(\"body\", b\"\"))\n                if not message.get(\"more_body\", False):\n                    break\n        self._body = b\"\".join(body_parts)\n    return self._body\n</code></pre>"},{"location":"api/core/request/#artanis.request.Request.json","title":"json  <code>async</code>","text":"<pre><code>json() -&gt; Any\n</code></pre> <p>Parse request body as JSON.</p> <p>Reads the request body and parses it as JSON data.</p> <p>Returns:</p> Type Description <code>Any</code> <p>Parsed JSON data (dict, list, or other JSON-serializable types)</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the body is not valid JSON</p> Source code in <code>artanis/request.py</code> <pre><code>async def json(self) -&gt; Any:\n    \"\"\"Parse request body as JSON.\n\n    Reads the request body and parses it as JSON data.\n\n    Returns:\n        Parsed JSON data (dict, list, or other JSON-serializable types)\n\n    Raises:\n        ValidationError: If the body is not valid JSON\n    \"\"\"\n    try:\n        body = await self.body()\n        return json.loads(body.decode())\n    except json.JSONDecodeError as e:\n        raise ValidationError(\n            message=\"Invalid JSON in request body\",\n            field=\"body\",\n            value=body.decode() if len(body) &lt; 200 else body.decode()[:200] + \"...\",\n            validation_errors={\"json_error\": str(e)},\n        )\n</code></pre>"},{"location":"api/core/router/","title":"Router Classes","text":"<p>The router system provides powerful routing capabilities including subrouting and modular route organization.</p>"},{"location":"api/core/router/#router","title":"Router","text":""},{"location":"api/core/router/#artanis.routing.Router","title":"Router","text":"<pre><code>Router(prefix: str = '')\n</code></pre> <p>Router class for handling route registration and resolution.</p> <p>Provides methods for registering routes with different HTTP methods, mounting subrouters, and resolving incoming requests to appropriate handlers.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>Optional path prefix for all routes in this router</p> <code>''</code> <p>Attributes:</p> Name Type Description <code>prefix</code> <p>Path prefix for this router</p> <code>routes</code> <code>dict[str, dict[str, Route]]</code> <p>Dictionary of registered routes</p> <code>subrouters</code> <code>dict[str, Router]</code> <p>Dictionary of mounted subrouters</p> Source code in <code>artanis/routing.py</code> <pre><code>def __init__(self, prefix: str = \"\") -&gt; None:\n    self.prefix = prefix.rstrip(\"/\")\n    self.routes: dict[str, dict[str, Route]] = {}\n    self.subrouters: dict[str, Router] = {}\n    self.logger = logger\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router-functions","title":"Functions","text":""},{"location":"api/core/router/#artanis.routing.Router.all","title":"all","text":"<pre><code>all(\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None\n</code></pre> <p>Register a route that responds to all HTTP methods.</p> <p>This registers the handler for all standard HTTP methods (GET, POST, PUT, DELETE, PATCH, OPTIONS).</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> Example <pre><code># Middleware that runs for all methods\ndef auth_middleware(request, user_id):\n    # Authenticate user for any HTTP method\n    return {\"user_id\": user_id, \"authenticated\": True}\n\nrouter.all(\"/users/{user_id}\", auth_middleware)\n</code></pre> Source code in <code>artanis/routing.py</code> <pre><code>def all(\n    self,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    \"\"\"Register a route that responds to all HTTP methods.\n\n    This registers the handler for all standard HTTP methods\n    (GET, POST, PUT, DELETE, PATCH, OPTIONS).\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n        middleware: Optional route-specific middleware\n\n    Example:\n        ```python\n        # Middleware that runs for all methods\n        def auth_middleware(request, user_id):\n            # Authenticate user for any HTTP method\n            return {\"user_id\": user_id, \"authenticated\": True}\n\n        router.all(\"/users/{user_id}\", auth_middleware)\n        ```\n    \"\"\"\n    methods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"OPTIONS\"]\n    for method in methods:\n        self.register_route(method, path, handler, middleware)\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.delete","title":"delete","text":"<pre><code>delete(\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None\n</code></pre> <p>Register a DELETE route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> Source code in <code>artanis/routing.py</code> <pre><code>def delete(\n    self,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    \"\"\"Register a DELETE route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n        middleware: Optional route-specific middleware\n    \"\"\"\n    self.register_route(\"DELETE\", path, handler, middleware)\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.find_route","title":"find_route","text":"<pre><code>find_route(\n    method: str, path: str\n) -&gt; tuple[Route | None, dict[str, str], Router | None]\n</code></pre> <p>Find a route handler and extract path parameters.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>HTTP method</p> required <code>path</code> <code>str</code> <p>Request path</p> required <p>Returns:</p> Type Description <code>tuple[Route | None, dict[str, str], Router | None]</code> <p>Tuple of (route, path_parameters, source_router) or (None, {}, None) if not found</p> Source code in <code>artanis/routing.py</code> <pre><code>def find_route(\n    self, method: str, path: str\n) -&gt; tuple[Route | None, dict[str, str], Router | None]:\n    \"\"\"Find a route handler and extract path parameters.\n\n    Args:\n        method: HTTP method\n        path: Request path\n\n    Returns:\n        Tuple of (route, path_parameters, source_router) or (None, {}, None) if not found\n    \"\"\"\n    method = method.upper()\n\n    # First, try direct routes in this router\n    for methods in self.routes.values():\n        if method in methods:\n            route = methods[method]\n            params = route.match(path)\n            if params is not None:\n                return route, params, self\n\n    # Then, try subrouters\n    for mount_path, subrouter in self.subrouters.items():\n        if \"{\" in mount_path:\n            # Handle parameterized mount paths\n            mount_route = Route(\"GET\", mount_path, lambda: None)\n\n            # Try to match the mount pattern against the beginning of the path\n            # We need to check if the path can be split into mount + sub parts\n            mount_pattern = mount_route.pattern.pattern\n            # Remove only the start ^ and end $ anchors, not ^ inside character classes\n            if mount_pattern.startswith(\"^\"):\n                partial_pattern = mount_pattern[1:]\n            else:\n                partial_pattern = mount_pattern\n            if partial_pattern.endswith(\"$\"):\n                partial_pattern = partial_pattern[:-1]\n\n            import re\n\n            # Try to match from start of path\n            match = re.match(partial_pattern, path)\n            if match:\n                mount_params = match.groupdict()\n                matched_length = match.end()\n\n                # Extract remaining path for subrouter\n                sub_path = path[matched_length:]\n                if not sub_path:\n                    sub_path = \"/\"\n                elif not sub_path.startswith(\"/\"):\n                    sub_path = \"/\" + sub_path\n\n                # Recursively search in subrouter\n                sub_route, sub_params, source_router = subrouter.find_route(\n                    method, sub_path\n                )\n                if sub_route is not None:\n                    # Merge mount parameters with subroute parameters\n                    all_params = {**mount_params, **sub_params}\n                    return sub_route, all_params, source_router\n        # Simple mount path (no parameters)\n        elif path.startswith(mount_path):\n            if mount_path == \"/\":\n                sub_path = path\n            else:\n                sub_path = path[len(mount_path) :]\n                if not sub_path:\n                    sub_path = \"/\"\n                elif not sub_path.startswith(\"/\"):\n                    sub_path = \"/\" + sub_path\n\n            # Recursively search in subrouter\n            sub_route, sub_params, source_router = subrouter.find_route(\n                method, sub_path\n            )\n            if sub_route is not None:\n                return sub_route, sub_params, source_router\n\n    return None, {}, None\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.get","title":"get","text":"<pre><code>get(\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None\n</code></pre> <p>Register a GET route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> Source code in <code>artanis/routing.py</code> <pre><code>def get(\n    self,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    \"\"\"Register a GET route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n        middleware: Optional route-specific middleware\n    \"\"\"\n    self.register_route(\"GET\", path, handler, middleware)\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.get_all_routes","title":"get_all_routes","text":"<pre><code>get_all_routes() -&gt; list[dict[str, Any]]\n</code></pre> <p>Get all routes from this router and subrouters.</p> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of all route dictionaries</p> Source code in <code>artanis/routing.py</code> <pre><code>def get_all_routes(self) -&gt; list[dict[str, Any]]:\n    \"\"\"Get all routes from this router and subrouters.\n\n    Returns:\n        List of all route dictionaries\n    \"\"\"\n    all_routes = []\n\n    # Add direct routes\n    for methods in self.routes.values():\n        for route in methods.values():\n            all_routes.append(route.to_dict())\n\n    # Add subrouter routes with proper path prefixes\n    for mount_path, subrouter in self.subrouters.items():\n        subrouter_routes = subrouter.get_all_routes()\n        for route_dict in subrouter_routes:\n            # Update the path to include the mount prefix\n            original_path = route_dict[\"path\"]\n            if mount_path == \"/\":\n                full_path = original_path\n            elif original_path == \"/\":\n                full_path = mount_path\n            else:\n                full_path = mount_path + original_path\n\n            # Create a new route dict with updated path\n            updated_route = route_dict.copy()\n            updated_route[\"path\"] = full_path\n            all_routes.append(updated_route)\n\n    return all_routes\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.get_allowed_methods","title":"get_allowed_methods","text":"<pre><code>get_allowed_methods(path: str) -&gt; list[str]\n</code></pre> <p>Get allowed HTTP methods for a given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Request path</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>List of allowed HTTP methods</p> Source code in <code>artanis/routing.py</code> <pre><code>def get_allowed_methods(self, path: str) -&gt; list[str]:\n    \"\"\"Get allowed HTTP methods for a given path.\n\n    Args:\n        path: Request path\n\n    Returns:\n        List of allowed HTTP methods\n    \"\"\"\n    allowed_methods = []\n\n    # Check direct routes\n    for methods in self.routes.values():\n        for route in methods.values():\n            if route.match(path) is not None:\n                allowed_methods.append(route.method)\n\n    # Check subrouters\n    for mount_path, subrouter in self.subrouters.items():\n        if path.startswith(mount_path):\n            if mount_path == \"/\":\n                sub_path = path\n            else:\n                sub_path = path[len(mount_path) :]\n                if not sub_path.startswith(\"/\"):\n                    sub_path = \"/\" + sub_path\n\n            allowed_methods.extend(subrouter.get_allowed_methods(sub_path))\n\n    return list(set(allowed_methods))  # Remove duplicates\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.mount","title":"mount","text":"<pre><code>mount(path: str, router: Router) -&gt; None\n</code></pre> <p>Mount a subrouter at the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path prefix where the subrouter should be mounted</p> required <code>router</code> <code>Router</code> <p>Router instance to mount</p> required Source code in <code>artanis/routing.py</code> <pre><code>def mount(self, path: str, router: Router) -&gt; None:\n    \"\"\"Mount a subrouter at the specified path.\n\n    Args:\n        path: Path prefix where the subrouter should be mounted\n        router: Router instance to mount\n    \"\"\"\n    normalized_path = self._normalize_path(path)\n\n    # Update subrouter's prefix\n    router.prefix = normalized_path\n\n    # Store subrouter\n    self.subrouters[normalized_path] = router\n\n    self.logger.debug(f\"Mounted subrouter at: {normalized_path}\")\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.options","title":"options","text":"<pre><code>options(\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None\n</code></pre> <p>Register an OPTIONS route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> Source code in <code>artanis/routing.py</code> <pre><code>def options(\n    self,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    \"\"\"Register an OPTIONS route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n        middleware: Optional route-specific middleware\n    \"\"\"\n    self.register_route(\"OPTIONS\", path, handler, middleware)\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.patch","title":"patch","text":"<pre><code>patch(\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None\n</code></pre> <p>Register a PATCH route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> Source code in <code>artanis/routing.py</code> <pre><code>def patch(\n    self,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    \"\"\"Register a PATCH route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n        middleware: Optional route-specific middleware\n    \"\"\"\n    self.register_route(\"PATCH\", path, handler, middleware)\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.post","title":"post","text":"<pre><code>post(\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None\n</code></pre> <p>Register a POST route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> Source code in <code>artanis/routing.py</code> <pre><code>def post(\n    self,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    \"\"\"Register a POST route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n        middleware: Optional route-specific middleware\n    \"\"\"\n    self.register_route(\"POST\", path, handler, middleware)\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.put","title":"put","text":"<pre><code>put(\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None\n</code></pre> <p>Register a PUT route.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> Source code in <code>artanis/routing.py</code> <pre><code>def put(\n    self,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    \"\"\"Register a PUT route.\n\n    Args:\n        path: URL path pattern\n        handler: Route handler function\n        middleware: Optional route-specific middleware\n    \"\"\"\n    self.register_route(\"PUT\", path, handler, middleware)\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Router.register_route","title":"register_route","text":"<pre><code>register_route(\n    method: str,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None\n</code></pre> <p>Register a route with the router.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>HTTP method</p> required <code>path</code> <code>str</code> <p>URL path pattern</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> Source code in <code>artanis/routing.py</code> <pre><code>def register_route(\n    self,\n    method: str,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    \"\"\"Register a route with the router.\n\n    Args:\n        method: HTTP method\n        path: URL path pattern\n        handler: Route handler function\n        middleware: Optional route-specific middleware\n    \"\"\"\n    # Normalize path\n    full_path = self._normalize_path(path)\n\n    if full_path not in self.routes:\n        self.routes[full_path] = {}\n\n    route = Route(method, full_path, handler, middleware)\n    self.routes[full_path][method.upper()] = route\n\n    self.logger.debug(f\"Registered {method.upper()} route: {full_path}\")\n</code></pre>"},{"location":"api/core/router/#route","title":"Route","text":""},{"location":"api/core/router/#artanis.routing.Route","title":"Route","text":"<pre><code>Route(\n    method: str,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n)\n</code></pre> <p>Represents a single route with its handler and metadata.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>HTTP method (GET, POST, PUT, DELETE, etc.)</p> required <code>path</code> <code>str</code> <p>URL path pattern with optional parameters</p> required <code>handler</code> <code>Callable[..., Any]</code> <p>Route handler function or coroutine</p> required <code>middleware</code> <code>list[Callable[..., Any]] | None</code> <p>Optional route-specific middleware</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>method</code> <p>HTTP method</p> <code>path</code> <p>URL path pattern</p> <code>handler</code> <p>Route handler function</p> <code>pattern</code> <p>Compiled regex pattern for path matching</p> <code>middleware</code> <p>Route-specific middleware</p> Source code in <code>artanis/routing.py</code> <pre><code>def __init__(\n    self,\n    method: str,\n    path: str,\n    handler: Callable[..., Any],\n    middleware: list[Callable[..., Any]] | None = None,\n) -&gt; None:\n    self.method = method.upper()\n    self.path = path\n    self.handler = handler\n    self.pattern = self._compile_path_pattern(path)\n    self.middleware = middleware or []\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Route-functions","title":"Functions","text":""},{"location":"api/core/router/#artanis.routing.Route.match","title":"match","text":"<pre><code>match(path: str) -&gt; dict[str, str] | None\n</code></pre> <p>Check if this route matches the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path to match against</p> required <p>Returns:</p> Type Description <code>dict[str, str] | None</code> <p>Dictionary of extracted path parameters if match, None otherwise</p> Source code in <code>artanis/routing.py</code> <pre><code>def match(self, path: str) -&gt; dict[str, str] | None:\n    \"\"\"Check if this route matches the given path.\n\n    Args:\n        path: URL path to match against\n\n    Returns:\n        Dictionary of extracted path parameters if match, None otherwise\n    \"\"\"\n    match = self.pattern.match(path)\n    return match.groupdict() if match else None\n</code></pre>"},{"location":"api/core/router/#artanis.routing.Route.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Convert route to dictionary for compatibility.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary representation of the route</p> Source code in <code>artanis/routing.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Convert route to dictionary for compatibility.\n\n    Returns:\n        Dictionary representation of the route\n    \"\"\"\n    return {\n        \"handler\": self.handler,\n        \"method\": self.method,\n        \"path\": self.path,\n        \"pattern\": self.pattern,\n    }\n</code></pre>"},{"location":"api-reference/","title":"API Reference","text":"<p>This section provides detailed documentation for all Artanis framework APIs and components.</p>"},{"location":"api-reference/#available-references","title":"Available References","text":""},{"location":"api-reference/#openapi-integration","title":"OpenAPI Integration","text":"<p>Complete reference for Artanis's OpenAPI 3.0.1 integration, including: - App class methods for OpenAPI spec generation - Decorators for route metadata (<code>@openapi_route</code>, <code>@response_model</code>, etc.) - Type system and automatic schema generation - Request/response validation middleware - Interactive documentation setup (Swagger UI &amp; ReDoc) - Complete examples and best practices</p>"},{"location":"api-reference/#quick-navigation","title":"Quick Navigation","text":"Component Description Reference OpenAPI API documentation &amp; validation openapi.md Core App Main application class Coming soon Routing Route registration &amp; handling Coming soon Middleware Request/response processing Coming soon Events Event handling system Coming soon Logging Structured logging Coming soon Security Security middleware (CORS, CSP, etc.) Coming soon"},{"location":"api-reference/#getting-started","title":"Getting Started","text":"<p>For a quick start with OpenAPI documentation:</p> <pre><code>from artanis import App\nfrom artanis.openapi import openapi_route\n\napp = App()\n\n@openapi_route(summary=\"Hello World\", tags=[\"demo\"])\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n\napp.get(\"/hello\", hello)\napp.generate_openapi_spec(title=\"My API\", version=\"1.0.0\")\napp.serve_docs()  # Visit /docs for interactive documentation\n</code></pre> <p>See the OpenAPI reference for complete documentation.</p>"},{"location":"api-reference/openapi/","title":"OpenAPI API Reference","text":"<p>This document provides a complete reference for Artanis's OpenAPI integration, which enables automatic API documentation generation with interactive Swagger UI and ReDoc interfaces.</p>"},{"location":"api-reference/openapi/#quick-start","title":"Quick Start","text":"<pre><code>from artanis import App\nfrom artanis.openapi import openapi_route, response_model\n\napp = App()\n\n@openapi_route(summary=\"Get user\", tags=[\"users\"])\n@response_model(dict, status_code=200)\nasync def get_user(user_id: int):\n    \"\"\"Retrieve a user by ID.\"\"\"\n    return {\"id\": user_id, \"name\": \"John Doe\"}\n\napp.get(\"/users/{user_id}\", get_user)\n\n# Generate OpenAPI spec and serve docs\napp.generate_openapi_spec(title=\"My API\", version=\"1.0.0\")\napp.serve_docs()  # Available at /docs and /redoc\n</code></pre>"},{"location":"api-reference/openapi/#app-class-methods","title":"App Class Methods","text":""},{"location":"api-reference/openapi/#generate_openapi_spectitle-version-description","title":"<code>generate_openapi_spec(title, version, description)</code>","text":"<p>Generates the OpenAPI 3.0.1 specification for your application.</p> <p>Parameters: - <code>title</code> (str): API title - <code>version</code> (str): API version (e.g., \"1.0.0\") - <code>description</code> (str, optional): API description (supports Markdown)</p> <p>Returns: <code>dict</code> - The OpenAPI specification dictionary</p> <p>Example: <pre><code>spec = app.generate_openapi_spec(\n    title=\"My REST API\",\n    version=\"2.1.0\",\n    description=\"A comprehensive API for managing users and posts\"\n)\n</code></pre></p>"},{"location":"api-reference/openapi/#serve_docsdocs_path-redoc_path-openapi_path-auto_generate","title":"<code>serve_docs(docs_path, redoc_path, openapi_path, auto_generate)</code>","text":"<p>Enables interactive API documentation endpoints.</p> <p>Parameters: - <code>docs_path</code> (str, default=\"/docs\"): Path for Swagger UI - <code>redoc_path</code> (str, default=\"/redoc\"): Path for ReDoc UI - <code>openapi_path</code> (str, default=\"/openapi.json\"): Path for OpenAPI JSON - <code>auto_generate</code> (bool, default=True): Auto-generate spec if not exists</p> <p>Example: <pre><code>app.serve_docs(\n    docs_path=\"/swagger\",\n    redoc_path=\"/documentation\",\n    openapi_path=\"/api.json\"\n)\n</code></pre></p>"},{"location":"api-reference/openapi/#add_openapi_metadataservers-tags","title":"<code>add_openapi_metadata(servers, tags)</code>","text":"<p>Adds metadata to the OpenAPI specification.</p> <p>Parameters: - <code>servers</code> (list, optional): List of server configurations - <code>tags</code> (list, optional): List of tag definitions</p> <p>Example: <pre><code>app.add_openapi_metadata(\n    servers=[\n        {\"url\": \"https://api.example.com\", \"description\": \"Production\"},\n        {\"url\": \"http://localhost:8000\", \"description\": \"Development\"}\n    ],\n    tags=[\n        {\"name\": \"users\", \"description\": \"User management\"},\n        {\"name\": \"posts\", \"description\": \"Blog posts\"}\n    ]\n)\n</code></pre></p>"},{"location":"api-reference/openapi/#export_openapifile_path-format-auto_generate","title":"<code>export_openapi(file_path, format, auto_generate)</code>","text":"<p>Exports the OpenAPI specification to a file.</p> <p>Parameters: - <code>file_path</code> (str): Output file path - <code>format</code> (str, default=\"json\"): Export format (\"json\" or \"yaml\") - <code>auto_generate</code> (bool, default=True): Generate spec if not exists</p> <p>Example: <pre><code>app.export_openapi(\"api_spec.json\", format=\"json\")\napp.export_openapi(\"api_spec.yaml\", format=\"yaml\")\n</code></pre></p>"},{"location":"api-reference/openapi/#add_openapi_validationvalidate_requests-validate_responses-strict_mode","title":"<code>add_openapi_validation(validate_requests, validate_responses, strict_mode)</code>","text":"<p>Adds request/response validation middleware.</p> <p>Parameters: - <code>validate_requests</code> (bool, default=True): Validate incoming requests - <code>validate_responses</code> (bool, default=False): Validate outgoing responses - <code>strict_mode</code> (bool, default=False): Strict validation mode</p> <p>Example: <pre><code>app.add_openapi_validation(\n    validate_requests=True,\n    validate_responses=True,\n    strict_mode=False\n)\n</code></pre></p>"},{"location":"api-reference/openapi/#decorators","title":"Decorators","text":""},{"location":"api-reference/openapi/#openapi_routesummary-description-tags-responses","title":"<code>@openapi_route(summary, description, tags, responses)</code>","text":"<p>Adds OpenAPI metadata to route handlers.</p> <p>Parameters: - <code>summary</code> (str, optional): Brief summary of the endpoint - <code>description</code> (str, optional): Detailed description - <code>tags</code> (list, optional): List of tags for grouping - <code>responses</code> (dict, optional): Response definitions</p> <p>Example: <pre><code>@openapi_route(\n    summary=\"Create user\",\n    description=\"Creates a new user account with validation\",\n    tags=[\"users\", \"auth\"],\n    responses={\n        201: {\"description\": \"User created successfully\"},\n        400: {\"description\": \"Invalid input data\"}\n    }\n)\nasync def create_user():\n    pass\n</code></pre></p>"},{"location":"api-reference/openapi/#response_modelmodel-status_code-description","title":"<code>@response_model(model, status_code, description)</code>","text":"<p>Specifies the response model and status code.</p> <p>Parameters: - <code>model</code> (type): Response model class (dataclass, dict, etc.) - <code>status_code</code> (int, default=200): HTTP status code - <code>description</code> (str, optional): Response description</p> <p>Example: <pre><code>from dataclasses import dataclass\n\n@dataclass\nclass User:\n    id: int\n    name: str\n    email: str\n\n@response_model(User, status_code=200)\nasync def get_user():\n    return User(id=1, name=\"John\", email=\"john@example.com\")\n</code></pre></p>"},{"location":"api-reference/openapi/#request_modelmodel","title":"<code>@request_model(model)</code>","text":"<p>Specifies the request body model.</p> <p>Parameters: - <code>model</code> (type): Request model class</p> <p>Example: <pre><code>@dataclass\nclass CreateUserRequest:\n    name: str\n    email: str\n    age: int = None\n\n@request_model(CreateUserRequest)\nasync def create_user(request):\n    data = await request.json()\n    # data is validated against CreateUserRequest\n    return {\"message\": \"User created\"}\n</code></pre></p>"},{"location":"api-reference/openapi/#tagname","title":"<code>@tag(name)</code>","text":"<p>Adds a tag to the route for organization.</p> <p>Parameters: - <code>name</code> (str): Tag name</p> <p>Example: <pre><code>@tag(\"users\")\n@tag(\"admin\")\nasync def admin_users():\n    pass\n</code></pre></p>"},{"location":"api-reference/openapi/#deprecatedreason","title":"<code>@deprecated(reason)</code>","text":"<p>Marks an endpoint as deprecated.</p> <p>Parameters: - <code>reason</code> (str, optional): Deprecation reason</p> <p>Example: <pre><code>@deprecated(\"Use GET /v2/users instead\")\nasync def old_users():\n    pass\n</code></pre></p>"},{"location":"api-reference/openapi/#operation_idid","title":"<code>@operation_id(id)</code>","text":"<p>Sets a unique operation ID for the endpoint.</p> <p>Parameters: - <code>id</code> (str): Unique operation identifier</p> <p>Example: <pre><code>@operation_id(\"getUserById\")\nasync def get_user():\n    pass\n</code></pre></p>"},{"location":"api-reference/openapi/#securityrequirements","title":"<code>@security(requirements)</code>","text":"<p>Adds security requirements to the endpoint.</p> <p>Parameters: - <code>requirements</code> (list): Security requirement definitions</p> <p>Example: <pre><code>@security([{\"bearerAuth\": []}])\nasync def protected_route():\n    pass\n</code></pre></p>"},{"location":"api-reference/openapi/#examplerequest_example-response_example","title":"<code>@example(request_example, response_example)</code>","text":"<p>Adds examples for request/response.</p> <p>Parameters: - <code>request_example</code> (dict, optional): Request body example - <code>response_example</code> (dict, optional): Response body example</p> <p>Example: <pre><code>@example(\n    request_example={\"name\": \"John Doe\", \"email\": \"john@example.com\"},\n    response_example={\"id\": 1, \"name\": \"John Doe\", \"status\": \"created\"}\n)\nasync def create_user():\n    pass\n</code></pre></p>"},{"location":"api-reference/openapi/#type-system","title":"Type System","text":"<p>Artanis automatically converts Python type hints to OpenAPI schemas:</p>"},{"location":"api-reference/openapi/#supported-types","title":"Supported Types","text":"Python Type OpenAPI Schema <code>int</code> <code>{\"type\": \"integer\"}</code> <code>float</code> <code>{\"type\": \"number\"}</code> <code>str</code> <code>{\"type\": \"string\"}</code> <code>bool</code> <code>{\"type\": \"boolean\"}</code> <code>list[T]</code> <code>{\"type\": \"array\", \"items\": {...}}</code> <code>dict[str, T]</code> <code>{\"type\": \"object\", \"additionalProperties\": {...}}</code> <code>Optional[T]</code> <code>{..., \"nullable\": true}</code> <code>dataclass</code> Complete object schema with properties <code>Enum</code> <code>{\"type\": \"string\", \"enum\": [...]}</code>"},{"location":"api-reference/openapi/#dataclass-example","title":"Dataclass Example","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Optional\nfrom enum import Enum\n\nclass UserStatus(Enum):\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n\n@dataclass\nclass User:\n    id: int\n    name: str\n    email: str\n    age: Optional[int] = None\n    status: UserStatus = UserStatus.ACTIVE\n\n# Automatically generates:\n# {\n#   \"type\": \"object\",\n#   \"properties\": {\n#     \"id\": {\"type\": \"integer\"},\n#     \"name\": {\"type\": \"string\"},\n#     \"email\": {\"type\": \"string\"},\n#     \"age\": {\"type\": \"integer\", \"nullable\": true},\n#     \"status\": {\"type\": \"string\", \"enum\": [\"active\", \"inactive\"]}\n#   },\n#   \"required\": [\"id\", \"name\", \"email\"]\n# }\n</code></pre>"},{"location":"api-reference/openapi/#validation-middleware","title":"Validation Middleware","text":"<p>The validation middleware automatically validates requests and responses against OpenAPI schemas.</p>"},{"location":"api-reference/openapi/#request-validation","title":"Request Validation","text":"<pre><code>app.add_openapi_validation(validate_requests=True)\n\n@request_model(CreateUserRequest)\nasync def create_user(request):\n    # Request body is automatically validated\n    # Invalid requests return 422 with detailed errors\n    data = await request.json()\n    return {\"user\": data}\n</code></pre>"},{"location":"api-reference/openapi/#response-validation","title":"Response Validation","text":"<pre><code>app.add_openapi_validation(validate_responses=True)\n\n@response_model(User, status_code=200)\nasync def get_user():\n    # Response is automatically validated against User schema\n    # Invalid responses log warnings or raise errors in strict mode\n    return User(id=1, name=\"John\", email=\"john@example.com\")\n</code></pre>"},{"location":"api-reference/openapi/#error-responses","title":"Error Responses","text":"<p>Validation errors return structured JSON responses:</p> <pre><code>{\n  \"detail\": \"Validation failed\",\n  \"errors\": [\n    {\n      \"field\": \"email\",\n      \"message\": \"Invalid email format\",\n      \"value\": \"invalid-email\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api-reference/openapi/#complete-example","title":"Complete Example","text":"<pre><code>from artanis import App\nfrom artanis.openapi import *\nfrom dataclasses import dataclass\nfrom typing import Optional\n\napp = App()\n\n@dataclass\nclass User:\n    id: int\n    name: str\n    email: str\n    age: Optional[int] = None\n\n@dataclass\nclass CreateUserRequest:\n    name: str\n    email: str\n    age: Optional[int] = None\n\n# Health check endpoint\n@openapi_route(\n    summary=\"Health Check\",\n    description=\"Check if the API is running\",\n    tags=[\"monitoring\"]\n)\nasync def health():\n    return {\"status\": \"healthy\"}\n\n# Get user endpoint\n@openapi_route(\n    summary=\"Get User\",\n    description=\"Retrieve a user by their ID\",\n    tags=[\"users\"]\n)\n@response_model(User, status_code=200)\nasync def get_user(user_id: int):\n    return User(id=user_id, name=\"John Doe\", email=\"john@example.com\")\n\n# Create user endpoint\n@openapi_route(\n    summary=\"Create User\",\n    description=\"Create a new user account\",\n    tags=[\"users\"]\n)\n@request_model(CreateUserRequest)\n@response_model(User, status_code=201)\nasync def create_user(request):\n    data = await request.json()\n    new_user = User(id=123, **data)\n    return new_user\n\n# Register routes\napp.get(\"/health\", health)\napp.get(\"/users/{user_id}\", get_user)\napp.post(\"/users\", create_user)\n\n# Configure OpenAPI\napp.add_openapi_metadata(\n    servers=[{\"url\": \"http://localhost:8000\", \"description\": \"Development\"}],\n    tags=[\n        {\"name\": \"monitoring\", \"description\": \"Health and monitoring\"},\n        {\"name\": \"users\", \"description\": \"User management\"}\n    ]\n)\n\n# Generate spec and serve docs\napp.generate_openapi_spec(\n    title=\"User Management API\",\n    version=\"1.0.0\",\n    description=\"A simple API for managing users\"\n)\n\napp.serve_docs()  # Available at /docs and /redoc\napp.add_openapi_validation(validate_requests=True)\n\n# Run the app\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"localhost\", port=8000)\n</code></pre> <p>Visit <code>http://localhost:8000/docs</code> for interactive Swagger UI documentation!</p>"},{"location":"api-reference/openapi/#best-practices","title":"Best Practices","text":"<ol> <li>Use Descriptive Summaries: Write clear, concise summaries for all endpoints</li> <li>Leverage Type Hints: Use proper Python type hints for automatic schema generation</li> <li>Group with Tags: Organize endpoints using meaningful tags</li> <li>Validate Requests: Enable request validation for better API reliability</li> <li>Document Responses: Use <code>@response_model</code> to document expected responses</li> <li>Handle Errors: Define error responses for different status codes</li> <li>Use Examples: Provide examples for complex request/response models</li> <li>Version Your API: Include version information in your OpenAPI spec</li> </ol>"},{"location":"api-reference/openapi/#integration-with-cors","title":"Integration with CORS","text":"<p>For browser-based API testing, add CORS middleware:</p> <pre><code>async def cors_middleware(request, response, next):\n    response.set_header(\"Access-Control-Allow-Origin\", \"*\")\n    response.set_header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n    response.set_header(\"Access-Control-Allow-Headers\", \"*\")\n\n    if hasattr(request, 'scope') and request.scope.get('method') == \"OPTIONS\":\n        response.status_code = 200\n        return\n\n    await next()\n\napp.use(cors_middleware)\n</code></pre> <p>This enables the \"Try it out\" functionality in Swagger UI to work properly.</p>"},{"location":"cli/","title":"Artanis CLI","text":"<p>The Artanis Command Line Interface (CLI) helps you quickly scaffold new projects and manage your applications.</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>The CLI is included when you install Artanis:</p> <pre><code>pip install artanis\n</code></pre> <p>Verify the installation:</p> <pre><code>artanis --version\n</code></pre>"},{"location":"cli/#available-commands","title":"Available Commands","text":""},{"location":"cli/#artanis-new","title":"<code>artanis new</code>","text":"<p>Creates a new Artanis project with a basic template.</p> <p>Usage: <pre><code>artanis new &lt;project_name&gt; [base_directory] [options]\n</code></pre></p> <p>Arguments: - <code>project_name</code> - Name of the project to create (required) - <code>base_directory</code> - Directory to create the project in (default: current directory)</p> <p>Options: - <code>--force, -f</code> - Overwrite existing files if they exist</p> <p>Examples:</p> <pre><code># Create a new project in the current directory\nartanis new my-blog-api\n\n# Create a project in a specific directory\nartanis new my-api /path/to/projects\n\n# Force overwrite existing files\nartanis new my-api --force\n</code></pre>"},{"location":"cli/#generated-project-structure","title":"Generated Project Structure","text":"<p>When you create a new project, Artanis generates:</p> <pre><code>my-blog-api/\n\u251c\u2500\u2500 app.py              # Main application file\n\u251c\u2500\u2500 requirements.txt    # Project dependencies\n\u2514\u2500\u2500 README.md          # Project documentation\n</code></pre>"},{"location":"cli/#apppy","title":"app.py","text":"<p>The main application file contains a minimal Artanis application:</p> <pre><code>import uvicorn\nfrom artanis import App\n\napp = App()\n\nasync def root():\n    return {\"message\": \"Hello from my-blog-api!\"}\n\napp.get(\"/\", root)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app:app\", host=\"127.0.0.1\", port=8000, reload=True)\n</code></pre>"},{"location":"cli/#requirementstxt","title":"requirements.txt","text":"<p>Contains the minimal dependencies needed:</p> <pre><code># Core dependencies for my-blog-api\nartanis&gt;=0.1.1\nuvicorn[standard]\n\n# Optional development dependencies (uncomment as needed)\n# pytest&gt;=7.0.0                    # For testing\n# pytest-asyncio&gt;=0.21.0           # Async testing support\n# requests&gt;=2.31.0                 # For API testing\n# python-dotenv&gt;=1.0.0             # Environment variable management\n# pydantic&gt;=2.0.0                  # Data validation and settings\n</code></pre>"},{"location":"cli/#readmemd","title":"README.md","text":"<p>Comprehensive documentation for your new project including:</p> <ul> <li>Setup instructions</li> <li>How to run the application</li> <li>API endpoints documentation</li> <li>Development guidelines</li> <li>Troubleshooting tips</li> </ul>"},{"location":"cli/#quick-start-with-cli","title":"Quick Start with CLI","text":"<p>Here's the fastest way to get a new Artanis project running:</p> <pre><code># 1. Create the project\nartanis new my-awesome-api\n\n# 2. Navigate to the project directory\ncd my-awesome-api\n\n# 3. Create a virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# 4. Install dependencies\npip install -r requirements.txt\n\n# 5. Run the application\npython app.py\n</code></pre> <p>Your application will be running at <code>http://127.0.0.1:8000</code>!</p>"},{"location":"cli/#project-name-validation","title":"Project Name Validation","text":"<p>The CLI validates project names to ensure they're valid Python identifiers:</p> <p>\u2705 Valid names: - <code>my-blog-api</code> - <code>user_management</code> - <code>BlogAPI2024</code> - <code>simple_app</code></p> <p>\u274c Invalid names: - <code>123-invalid</code> (starts with number) - <code>my app</code> (contains spaces) - <code>my@app</code> (contains special characters) - Names longer than 50 characters</p>"},{"location":"cli/#next-steps","title":"Next Steps","text":"<p>After creating your project:</p> <ol> <li>Explore the generated code - Understand the basic structure</li> <li>Add more routes - Expand your API with additional endpoints</li> <li>Add middleware - Implement authentication, logging, CORS</li> <li>Connect a database - Integrate with your preferred database</li> <li>Write tests - Add unit tests for your endpoints</li> <li>Deploy - Deploy your application to production</li> </ol>"},{"location":"cli/#cli-help","title":"CLI Help","text":"<p>Get help for any command:</p> <pre><code># General help\nartanis --help\n\n# Command-specific help\nartanis new --help\n</code></pre>"},{"location":"cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/#command-not-found","title":"Command not found","text":"<p>If you get <code>artanis: command not found</code>:</p> <ol> <li>Make sure Artanis is installed: <code>pip install artanis</code></li> <li>Check your PATH includes pip's binary directory</li> <li>Try using the full path: <code>python -m artanis.cli.main</code></li> </ol>"},{"location":"cli/#permission-errors","title":"Permission errors","text":"<p>If you get permission errors:</p> <ol> <li>Use a virtual environment (recommended)</li> <li>Use <code>--user</code> flag when installing: <code>pip install --user artanis</code></li> <li>Avoid using <code>sudo</code> with pip</li> </ol>"},{"location":"cli/#project-already-exists","title":"Project already exists","text":"<p>If the project directory already exists:</p> <ul> <li>Use <code>--force</code> to overwrite: <code>artanis new myproject --force</code></li> <li>Or choose a different name/location</li> </ul>"},{"location":"cli/#future-cli-features","title":"Future CLI Features","text":"<p>Planned features for future releases:</p> <ul> <li><code>artanis generate</code> - Generate specific components (routes, middleware)</li> <li><code>artanis serve</code> - Development server with hot reloading</li> <li><code>artanis test</code> - Run project tests</li> <li><code>artanis deploy</code> - Deploy to various platforms</li> <li>Project templates - Different starter templates for common use cases</li> </ul> <p>The CLI makes it easy to get started with Artanis quickly and consistently. For more advanced usage, see our tutorial and examples.</p>"},{"location":"contributing/documentation/","title":"Contributing to Documentation","text":"<p>This guide explains how to work with Artanis documentation, including local development, building, and deployment.</p>"},{"location":"contributing/documentation/#documentation-structure","title":"Documentation Structure","text":"<p>The Artanis documentation is built with MkDocs using the Material theme:</p> <pre><code>docs/\n\u251c\u2500\u2500 mkdocs.yml              # MkDocs configuration\n\u251c\u2500\u2500 .mkdocsignore          # Files to ignore during build\n\u251c\u2500\u2500 index.md               # Homepage\n\u251c\u2500\u2500 getting-started/       # Installation and tutorials\n\u251c\u2500\u2500 tutorials/             # Step-by-step guides\n\u251c\u2500\u2500 examples/              # Working code examples\n\u251c\u2500\u2500 api/                   # API reference (auto-generated)\n\u251c\u2500\u2500 cli/                   # CLI documentation\n\u2514\u2500\u2500 assets/                # Images and static files\n</code></pre>"},{"location":"contributing/documentation/#prerequisites","title":"Prerequisites","text":"<p>Before working with the documentation, ensure you have:</p> <ol> <li>Python 3.8+ installed</li> <li>Artanis development environment set up</li> <li>Documentation dependencies installed:</li> </ol> <pre><code># Install MkDocs and extensions\npip install mkdocs-material[recommended]\npip install mkdocstrings[python]\npip install ruff  # Required for API documentation formatting\n</code></pre>"},{"location":"contributing/documentation/#local-development","title":"Local Development","text":""},{"location":"contributing/documentation/#starting-the-development-server","title":"Starting the Development Server","text":"<p>To work on documentation locally with hot-reloading:</p> <pre><code># Navigate to project root\ncd /path/to/Artanis\n\n# Start the development server\nmkdocs serve --dev-addr 127.0.0.1:8080\n\n# Or use the default port 8000\nmkdocs serve\n</code></pre> <p>The documentation will be available at: - Custom port: http://127.0.0.1:8080/Artanis/ - Default port: http://127.0.0.1:8000/</p>"},{"location":"contributing/documentation/#making-changes","title":"Making Changes","text":"<ol> <li>Edit markdown files in the <code>docs/</code> directory</li> <li>Save changes - the server will automatically reload</li> <li>View updates in your browser immediately</li> </ol>"},{"location":"contributing/documentation/#adding-new-pages","title":"Adding New Pages","text":"<ol> <li>Create the markdown file in the appropriate directory</li> <li>Add to navigation in <code>mkdocs.yml</code>:</li> </ol> <pre><code>nav:\n  - Home: index.md\n  - Getting Started:\n    - Installation: getting-started/installation.md\n    - Your New Page: getting-started/new-page.md  # Add here\n</code></pre>"},{"location":"contributing/documentation/#building-documentation","title":"Building Documentation","text":""},{"location":"contributing/documentation/#development-build","title":"Development Build","text":"<p>For testing purposes:</p> <pre><code># Build documentation (allows warnings)\nmkdocs build\n\n# Build to custom directory\nmkdocs build --site-dir /path/to/output\n</code></pre>"},{"location":"contributing/documentation/#production-build","title":"Production Build","text":"<p>For deployment (strict mode):</p> <pre><code># Build with strict validation (fails on warnings)\nmkdocs build --strict\n\n# Clean build (removes previous build first)\nmkdocs build --clean --strict\n</code></pre>"},{"location":"contributing/documentation/#troubleshooting-builds","title":"Troubleshooting Builds","text":"<p>Common build issues and solutions:</p>"},{"location":"contributing/documentation/#missing-dependencies","title":"Missing Dependencies","text":"<pre><code># Error: ModuleNotFoundError: No module named 'material.extensions.emoji'\npip install mkdocs-material[recommended]\n\n# Error: No module named 'mkdocstrings'\npip install mkdocstrings[python]\n\n# Error: ruff not found (for API docs)\npip install ruff\n</code></pre>"},{"location":"contributing/documentation/#icon-issues","title":"Icon Issues","text":"<p>If Material Design icons show as raw text (<code>:material-icon:</code>): - Ensure <code>pymdownx.emoji</code> extension is configured in <code>mkdocs.yml</code> - Check that <code>mkdocs-material-extensions</code> is installed</p>"},{"location":"contributing/documentation/#build-warnings","title":"Build Warnings","text":"<pre><code># File conflicts (README.md vs index.md)\n# Remove conflicting files or add to .mkdocsignore\n\n# Broken internal links\n# Fix relative paths in markdown files\n\n# Missing pages in navigation\n# Add to mkdocs.yml nav section or ignore warning\n</code></pre>"},{"location":"contributing/documentation/#api-documentation","title":"API Documentation","text":"<p>The API documentation is automatically generated from docstrings using mkdocstrings.</p>"},{"location":"contributing/documentation/#adding-api-documentation","title":"Adding API Documentation","text":"<p>Create a new markdown file in <code>docs/api/</code>:</p> <pre><code># My Module\n\n::: artanis.my_module.MyClass\n    options:\n      show_source: true\n      show_signature_annotations: true\n</code></pre>"},{"location":"contributing/documentation/#api-documentation-options","title":"API Documentation Options","text":"<p>Configure in <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - mkdocstrings:\n      handlers:\n        python:\n          options:\n            docstring_style: google\n            show_source: true\n            show_signature_annotations: true\n</code></pre>"},{"location":"contributing/documentation/#deployment","title":"Deployment","text":""},{"location":"contributing/documentation/#automatic-deployment-github-actions","title":"Automatic Deployment (GitHub Actions)","text":"<p>The documentation is automatically deployed to GitHub Pages when changes are pushed to the <code>main</code> branch.</p> <p>Workflow: <code>.github/workflows/docs.yml</code> - Builds documentation with <code>mkdocs build --strict</code> - Deploys to GitHub Pages - Available at: https://nordxai.github.io/Artanis/</p>"},{"location":"contributing/documentation/#manual-deployment","title":"Manual Deployment","text":"<p>For manual deployment to GitHub Pages:</p> <pre><code># Deploy to GitHub Pages (requires git remote)\nmkdocs gh-deploy\n\n# Deploy with custom commit message\nmkdocs gh-deploy --message \"Update documentation\"\n</code></pre>"},{"location":"contributing/documentation/#custom-deployment","title":"Custom Deployment","text":"<p>To deploy to other platforms:</p> <pre><code># Build static site\nmkdocs build\n\n# Upload contents of site/ directory to your host\n# The site/ directory contains the complete static website\n</code></pre>"},{"location":"contributing/documentation/#configuration","title":"Configuration","text":""},{"location":"contributing/documentation/#mkdocs-configuration-mkdocsyml","title":"MkDocs Configuration (<code>mkdocs.yml</code>)","text":"<p>Key configuration sections:</p> <pre><code>site_name: Artanis Framework\nsite_url: https://nordxai.github.io/Artanis\nrepo_url: https://github.com/nordxai/Artanis\n\ntheme:\n  name: material\n  features:\n    - navigation.tabs        # Top-level navigation tabs\n    - search.highlight      # Highlight search terms\n    - content.code.copy     # Code copy buttons\n\nplugins:\n  - search                  # Built-in search\n  - mkdocstrings:          # API documentation\n      handlers:\n        python:\n          options:\n            docstring_style: google\n\nmarkdown_extensions:\n  - pymdownx.emoji:         # Material Design icons\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  - admonition              # Note/warning boxes\n  - pymdownx.superfences    # Code blocks\n  - attr_list               # HTML attributes in markdown\n</code></pre>"},{"location":"contributing/documentation/#ignoring-files-mkdocsignore","title":"Ignoring Files (<code>.mkdocsignore</code>)","text":"<p>Exclude files from documentation builds:</p> <pre><code># Virtual environments\n**/venv/\n**/env/\n\n# Python cache\n**/__pycache__/\n**/*.pyc\n\n# IDE files\n**/.vscode/\n**/.idea/\n\n# Backup files\n**/*.bak\n</code></pre>"},{"location":"contributing/documentation/#writing-guidelines","title":"Writing Guidelines","text":""},{"location":"contributing/documentation/#markdown-best-practices","title":"Markdown Best Practices","text":"<ol> <li>Use descriptive headings (H1, H2, H3)</li> <li>Add code examples with syntax highlighting</li> <li>Include internal links to related sections</li> <li>Use admonitions for important information</li> </ol> <pre><code>!!! tip \"Pro Tip\"\n    Use admonitions to highlight important information!\n\n!!! warning \"Important\"\n    Always test code examples before documenting them.\n</code></pre>"},{"location":"contributing/documentation/#code-examples","title":"Code Examples","text":"<p>Include working, tested code examples:</p> <pre><code>from artanis import App\n\napp = App()\n\n@app.get(\"/\")\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n</code></pre>"},{"location":"contributing/documentation/#api-documentation-style","title":"API Documentation Style","text":"<p>Use Google-style docstrings for consistency:</p> <pre><code>def my_function(param1: str, param2: int = 0) -&gt; dict:\n    \"\"\"Summary of the function.\n\n    Longer description explaining the function's purpose and behavior.\n\n    Args:\n        param1: Description of the first parameter.\n        param2: Description of the second parameter. Defaults to 0.\n\n    Returns:\n        Dictionary containing the result.\n\n    Raises:\n        ValueError: If param1 is empty.\n\n    Examples:\n        &gt;&gt;&gt; my_function(\"hello\", 42)\n        {\"result\": \"processed\"}\n    \"\"\"\n</code></pre>"},{"location":"contributing/documentation/#testing-documentation","title":"Testing Documentation","text":""},{"location":"contributing/documentation/#content-testing","title":"Content Testing","text":"<ol> <li>Verify all links work (internal and external)</li> <li>Test all code examples by running them</li> <li>Check cross-references between sections</li> <li>Validate markup rendering in the browser</li> </ol>"},{"location":"contributing/documentation/#build-testing","title":"Build Testing","text":"<pre><code># Test strict build (should pass for production)\nmkdocs build --strict\n\n# Test different Python versions (if applicable)\npython3.8 -m mkdocs build --strict\npython3.11 -m mkdocs build --strict\n</code></pre>"},{"location":"contributing/documentation/#common-tasks","title":"Common Tasks","text":""},{"location":"contributing/documentation/#adding-a-new-example","title":"Adding a New Example","text":"<ol> <li>Create example directory: <code>docs/examples/my-example/</code></li> <li>Add working code: <code>docs/examples/my-example/app.py</code></li> <li>Write documentation: <code>docs/examples/my-example.md</code></li> <li>Add to navigation: Update <code>mkdocs.yml</code></li> <li>Test thoroughly: Ensure all code works</li> </ol>"},{"location":"contributing/documentation/#updating-api-documentation","title":"Updating API Documentation","text":"<ol> <li>Update docstrings in source code</li> <li>Rebuild documentation: <code>mkdocs build</code></li> <li>Verify auto-generated content looks correct</li> </ol>"},{"location":"contributing/documentation/#adding-icons","title":"Adding Icons","text":"<p>Use Material Design icons in documentation:</p> <pre><code>:material-rocket-launch: Quick Start\n:octicons-arrow-right-24: Continue\n:fontawesome-brands-github: Source Code\n</code></pre>"},{"location":"contributing/documentation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues with documentation:</p> <ol> <li>Check the build output for specific error messages</li> <li>Review the MkDocs logs for warnings and errors</li> <li>Test with a clean build: <code>mkdocs build --clean</code></li> <li>Search existing issues in the repository</li> <li>Create a new issue with:</li> <li>Your operating system</li> <li>Python version</li> <li>Installed packages (<code>pip list</code>)</li> <li>Complete error message</li> <li>Steps to reproduce</li> </ol>"},{"location":"contributing/documentation/#resources","title":"Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material Theme Docs</li> <li>mkdocstrings Documentation</li> <li>Markdown Guide</li> <li>Python Docstring Conventions (PEP 257)</li> </ul>"},{"location":"deployment/docker/","title":"Docker Deployment Guide","text":"<p>This guide shows how to containerize and deploy Artanis applications using Docker, including development and production configurations.</p>"},{"location":"deployment/docker/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Basic Docker Setup</li> <li>Multi-stage Builds</li> <li>Docker Compose</li> <li>Production Optimization</li> <li>Environment Variables</li> <li>Health Checks</li> <li>Security Best Practices</li> </ul>"},{"location":"deployment/docker/#basic-docker-setup","title":"\ud83d\udc33 Basic Docker Setup","text":""},{"location":"deployment/docker/#simple-dockerfile","title":"Simple Dockerfile","text":"<p>Create a <code>Dockerfile</code> in your project root:</p> <pre><code>FROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements first (for better layer caching)\nCOPY requirements.txt .\n\n# Install Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create non-root user for security\nRUN useradd --create-home --shell /bin/bash app &amp;&amp; \\\n    chown -R app:app /app\nUSER app\n\n# Expose port\nEXPOSE 8000\n\n# Start application\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"deployment/docker/#basic-requirementstxt","title":"Basic requirements.txt","text":"<pre><code>artanis&gt;=1.0.0\nuvicorn[standard]&gt;=0.20.0\n</code></pre>"},{"location":"deployment/docker/#build-and-run","title":"Build and Run","text":"<pre><code># Build the image\ndocker build -t my-artanis-app .\n\n# Run the container\ndocker run -p 8000:8000 my-artanis-app\n\n# Run with environment variables\ndocker run -p 8000:8000 -e ENVIRONMENT=production my-artanis-app\n</code></pre>"},{"location":"deployment/docker/#multi-stage-builds","title":"\ud83c\udfd7\ufe0f Multi-stage Builds","text":"<p>For production optimization, use multi-stage builds:</p> <pre><code># Multi-stage Dockerfile\nFROM python:3.11 as builder\n\nWORKDIR /app\n\n# Install build dependencies\nRUN pip install --upgrade pip poetry\n\n# Copy dependency files\nCOPY pyproject.toml poetry.lock ./\n\n# Configure poetry and install dependencies\nRUN poetry config virtualenvs.create false &amp;&amp; \\\n    poetry install --only=main --no-dev\n\n# Production stage\nFROM python:3.11-slim as production\n\nWORKDIR /app\n\n# Install runtime dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy Python packages from builder stage\nCOPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages\nCOPY --from=builder /usr/local/bin /usr/local/bin\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN groupadd -r app &amp;&amp; useradd -r -g app app &amp;&amp; \\\n    chown -R app:app /app\nUSER app\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\nEXPOSE 8000\n\n# Use uvicorn for production\nCMD [\"uvicorn\", \"app:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"deployment/docker/#docker-compose","title":"\ud83d\udc19 Docker Compose","text":""},{"location":"deployment/docker/#development-setup","title":"Development Setup","text":"<p>Create <code>docker-compose.yml</code>:</p> <pre><code>version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - ENVIRONMENT=development\n      - DEBUG=true\n      - DATABASE_URL=postgresql://user:password@db:5432/artanis_dev\n      - REDIS_URL=redis://redis:6379/0\n    volumes:\n      - .:/app  # Mount source code for development\n    depends_on:\n      - db\n      - redis\n    command: [\"python\", \"app.py\"]  # Development server with reload\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: artanis_dev\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre>"},{"location":"deployment/docker/#production-setup","title":"Production Setup","text":"<p>Create <code>docker-compose.prod.yml</code>:</p> <pre><code>version: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      target: production\n    ports:\n      - \"8000:8000\"\n    environment:\n      - ENVIRONMENT=production\n      - DEBUG=false\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n      - SECRET_KEY=${SECRET_KEY}\n    depends_on:\n      - db\n      - redis\n    restart: unless-stopped\n    command: [\"uvicorn\", \"app:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--workers\", \"4\"]\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n    command: redis-server --appendonly yes\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - app\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre>"},{"location":"deployment/docker/#commands","title":"Commands","text":"<pre><code># Development\ndocker-compose up -d\n\n# Production\ndocker-compose -f docker-compose.prod.yml up -d\n\n# View logs\ndocker-compose logs -f app\n\n# Scale the application\ndocker-compose -f docker-compose.prod.yml up -d --scale app=3\n</code></pre>"},{"location":"deployment/docker/#production-optimization","title":"\ud83d\ude80 Production Optimization","text":""},{"location":"deployment/docker/#optimized-production-dockerfile","title":"Optimized Production Dockerfile","text":"<pre><code>FROM python:3.11-slim as base\n\n# Set environment variables\nENV PYTHONUNBUFFERED=1 \\\n    PYTHONDONTWRITEBYTECODE=1 \\\n    PIP_NO_CACHE_DIR=1 \\\n    PIP_DISABLE_PIP_VERSION_CHECK=1\n\n# Build stage\nFROM base as builder\n\nWORKDIR /app\n\n# Install build dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy and install requirements\nCOPY requirements.txt .\nRUN pip install --user --no-warn-script-location -r requirements.txt\n\n# Production stage\nFROM base as production\n\nWORKDIR /app\n\n# Install runtime dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    tini \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy installed packages from builder\nCOPY --from=builder /root/.local /root/.local\n\n# Copy application\nCOPY . .\n\n# Create non-root user\nRUN groupadd -r app &amp;&amp; useradd -r -g app app &amp;&amp; \\\n    chown -R app:app /app\n\n# Set PATH to include user installed packages\nENV PATH=/root/.local/bin:$PATH\n\n# Switch to non-root user\nUSER app\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\nEXPOSE 8000\n\n# Use tini as entrypoint for proper signal handling\nENTRYPOINT [\"tini\", \"--\"]\n\n# Production command with optimizations\nCMD [\"uvicorn\", \"app:app\", \\\n     \"--host\", \"0.0.0.0\", \\\n     \"--port\", \"8000\", \\\n     \"--workers\", \"4\", \\\n     \"--worker-class\", \"uvicorn.workers.UvicornWorker\", \\\n     \"--loop\", \"uvloop\", \\\n     \"--http\", \"httptools\"]\n</code></pre>"},{"location":"deployment/docker/#environment-variables","title":"\ud83c\udf0d Environment Variables","text":""},{"location":"deployment/docker/#env-file-for-development","title":".env file for development","text":"<pre><code># .env\nENVIRONMENT=development\nDEBUG=true\nHOST=0.0.0.0\nPORT=8000\n\n# Database\nDATABASE_URL=postgresql://user:password@localhost:5432/artanis_dev\n\n# Redis\nREDIS_URL=redis://localhost:6379/0\n\n# Security\nSECRET_KEY=your-development-secret-key\nJWT_SECRET=your-jwt-secret\n\n# External Services\nSMTP_HOST=smtp.mailtrap.io\nSMTP_PORT=2525\nSMTP_USER=your_smtp_user\nSMTP_PASS=your_smtp_pass\n</code></pre>"},{"location":"deployment/docker/#production-environment-variables","title":"Production environment variables","text":"<pre><code># Production .env (use secrets management in real deployment)\nENVIRONMENT=production\nDEBUG=false\nHOST=0.0.0.0\nPORT=8000\n\n# Database\nDATABASE_URL=postgresql://user:secure_password@db:5432/artanis_prod\n\n# Redis\nREDIS_URL=redis://redis:6379/0\n\n# Security (use secrets management)\nSECRET_KEY=${SECRET_KEY}\nJWT_SECRET=${JWT_SECRET}\n\n# Logging\nLOG_LEVEL=INFO\nLOG_FORMAT=json\n\n# Performance\nWORKERS=4\nMAX_REQUESTS=1000\nMAX_REQUESTS_JITTER=100\n</code></pre>"},{"location":"deployment/docker/#health-checks","title":"\ud83c\udfe5 Health Checks","text":""},{"location":"deployment/docker/#application-health-endpoint","title":"Application health endpoint","text":"<pre><code># app.py\nasync def health_check():\n    \"\"\"Comprehensive health check for Docker.\"\"\"\n    try:\n        # Check database connection\n        # db_status = await check_database()\n\n        # Check Redis connection\n        # redis_status = await check_redis()\n\n        return {\n            \"status\": \"healthy\",\n            \"timestamp\": time.time(),\n            \"version\": \"1.0.0\",\n            \"environment\": os.getenv(\"ENVIRONMENT\", \"unknown\"),\n            \"checks\": {\n                \"api\": \"healthy\",\n                \"database\": \"healthy\",  # db_status\n                \"cache\": \"healthy\"      # redis_status\n            }\n        }\n    except Exception as e:\n        return {\n            \"status\": \"unhealthy\",\n            \"error\": str(e)\n        }, 503\n\n# Register the health check route\napp.get(\"/health\", health_check)\n</code></pre>"},{"location":"deployment/docker/#docker-health-check","title":"Docker health check","text":"<pre><code># Add to Dockerfile\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n</code></pre>"},{"location":"deployment/docker/#custom-health-check-script","title":"Custom health check script","text":"<pre><code>#!/bin/bash\n# healthcheck.sh\n\nset -e\n\n# Check if application is responding\nresponse=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8000/health)\n\nif [ \"$response\" != \"200\" ]; then\n    echo \"Health check failed with status: $response\"\n    exit 1\nfi\n\necho \"Health check passed\"\nexit 0\n</code></pre>"},{"location":"deployment/docker/#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":""},{"location":"deployment/docker/#1-non-root-user","title":"1. Non-root User","text":"<pre><code># Create and use non-root user\nRUN groupadd -r app &amp;&amp; useradd -r -g app app\nUSER app\n</code></pre>"},{"location":"deployment/docker/#2-minimal-base-image","title":"2. Minimal Base Image","text":"<pre><code># Use slim or alpine images\nFROM python:3.11-slim\n# or\nFROM python:3.11-alpine\n</code></pre>"},{"location":"deployment/docker/#3-secret-management","title":"3. Secret Management","text":"<pre><code># docker-compose.yml\nservices:\n  app:\n    environment:\n      - SECRET_KEY_FILE=/run/secrets/secret_key\n    secrets:\n      - secret_key\n\nsecrets:\n  secret_key:\n    file: ./secrets/secret_key.txt\n</code></pre>"},{"location":"deployment/docker/#4-network-security","title":"4. Network Security","text":"<pre><code># docker-compose.yml\nservices:\n  app:\n    networks:\n      - backend\n    # Don't expose database ports to host\n\n  db:\n    networks:\n      - backend\n    # No ports exposed to host\n\nnetworks:\n  backend:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker/#5-read-only-filesystem","title":"5. Read-only Filesystem","text":"<pre><code># Add to Dockerfile for extra security\nUSER app\nVOLUME [\"/tmp\"]\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"uvicorn\", \"app:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n\n# Run with read-only filesystem\n# docker run --read-only --tmpfs /tmp my-artanis-app\n</code></pre>"},{"location":"deployment/docker/#monitoring-with-docker","title":"\ud83d\udcca Monitoring with Docker","text":""},{"location":"deployment/docker/#logging-configuration","title":"Logging Configuration","text":"<pre><code># docker-compose.yml\nservices:\n  app:\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n</code></pre>"},{"location":"deployment/docker/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code># Add to your Artanis app\nfrom prometheus_client import Counter, Histogram, generate_latest\n\nREQUEST_COUNT = Counter('requests_total', 'Total requests', ['method', 'endpoint'])\nREQUEST_DURATION = Histogram('request_duration_seconds', 'Request duration')\n\nasync def metrics():\n    \"\"\"Prometheus metrics endpoint.\"\"\"\n    return generate_latest(), 200, {\"Content-Type\": \"text/plain\"}\n\n# Register the metrics route\napp.get(\"/metrics\", metrics)\n</code></pre>"},{"location":"deployment/docker/#deployment-commands","title":"\ud83d\udea2 Deployment Commands","text":""},{"location":"deployment/docker/#build-and-deploy","title":"Build and Deploy","text":"<pre><code># Build for production\ndocker build -t my-artanis-app:latest -f Dockerfile.prod .\n\n# Tag for registry\ndocker tag my-artanis-app:latest registry.example.com/my-artanis-app:v1.0.0\n\n# Push to registry\ndocker push registry.example.com/my-artanis-app:v1.0.0\n\n# Deploy\ndocker-compose -f docker-compose.prod.yml up -d\n\n# Rolling update\ndocker-compose -f docker-compose.prod.yml up -d --no-deps --build app\n</code></pre>"},{"location":"deployment/docker/#maintenance-commands","title":"Maintenance Commands","text":"<pre><code># View logs\ndocker-compose logs -f app\n\n# Execute commands in container\ndocker-compose exec app bash\n\n# Database migrations\ndocker-compose exec app python manage.py migrate\n\n# Backup database\ndocker-compose exec db pg_dump -U user artanis_prod &gt; backup.sql\n\n# Scale services\ndocker-compose -f docker-compose.prod.yml up -d --scale app=3\n</code></pre> <p>This comprehensive Docker guide covers everything from basic containerization to production-ready deployments with security, monitoring, and best practices.</p>"},{"location":"examples/","title":"Examples","text":"<p>Explore practical examples that demonstrate Artanis features and common patterns. Each example includes complete, working code that you can run and modify.</p>"},{"location":"examples/#featured-examples","title":"Featured Examples","text":"<ul> <li> <p>:material-book-open:{ .lg .middle } Blog API</p> <p>Complete REST API with CRUD operations, authentication, and data validation</p> <p>Features: Database integration, middleware, error handling, routing</p> <p>:octicons-arrow-right-24: View Example</p> </li> <li> <p>:material-shield-check:{ .lg .middle } Middleware Demo</p> <p>Comprehensive middleware examples including security, logging, and custom middleware</p> <p>Features: CORS, authentication, rate limiting, request logging</p> <p>:octicons-arrow-right-24: View Example</p> </li> <li> <p>:material-sitemap:{ .lg .middle } Router Patterns</p> <p>Advanced routing patterns with subrouting and modular organization</p> <p>Features: Subrouters, parameterized mounting, nested routes</p> <p>:octicons-arrow-right-24: View Example</p> </li> </ul>"},{"location":"examples/#quick-start-examples","title":"Quick Start Examples","text":""},{"location":"examples/#hello-world","title":"Hello World","text":"<p>The simplest possible Artanis application:</p> <pre><code>from artanis import App\n\napp = App()\n\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n\napp.get(\"/\", hello)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"examples/#path-parameters","title":"Path Parameters","text":"<p>Handle dynamic URL segments:</p> <pre><code>from artanis import App\n\napp = App()\n\nasync def get_user(user_id):\n    return {\"user_id\": user_id, \"name\": f\"User {user_id}\"}\n\nasync def get_user_posts(user_id, post_id):\n    return {\n        \"user_id\": user_id,\n        \"post_id\": post_id,\n        \"title\": f\"Post {post_id} by User {user_id}\"\n    }\n\napp.get(\"/users/{user_id}\", get_user)\napp.get(\"/users/{user_id}/posts/{post_id}\", get_user_posts)\n</code></pre>"},{"location":"examples/#request-body-handling","title":"Request Body Handling","text":"<p>Process JSON request data:</p> <pre><code>from artanis import App\n\napp = App()\n\nasync def create_post(request):\n    data = await request.json()\n\n    return {\n        \"message\": \"Post created\",\n        \"post\": {\n            \"id\": 123,\n            \"title\": data.get(\"title\"),\n            \"content\": data.get(\"content\"),\n            \"created_at\": \"2024-01-15T10:30:00Z\"\n        }\n    }\n\nasync def update_post(post_id, request):\n    data = await request.json()\n\n    return {\n        \"message\": f\"Post {post_id} updated\",\n        \"changes\": data\n    }\n\napp.post(\"/posts\", create_post)\napp.put(\"/posts/{post_id}\", update_post)\n</code></pre>"},{"location":"examples/#basic-middleware","title":"Basic Middleware","text":"<p>Add functionality that runs for all requests:</p> <pre><code>from artanis import App\nimport time\n\napp = App()\n\n# Request timing middleware\nasync def timing_middleware(request, response, next):\n    start_time = time.time()\n\n    await next()\n\n    duration = time.time() - start_time\n    response.headers[\"X-Response-Time\"] = f\"{duration:.3f}s\"\n\n# CORS middleware\nasync def cors_middleware(request, response, next):\n    response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE\"\n    await next()\n\napp.use(timing_middleware)\napp.use(cors_middleware)\n\nasync def hello():\n    return {\"message\": \"Hello with middleware!\"}\n\napp.get(\"/\", hello)\n</code></pre>"},{"location":"examples/#pattern-categories","title":"Pattern Categories","text":""},{"location":"examples/#web-apis","title":"\ud83c\udf10 Web APIs","text":"<p>Examples for building REST APIs:</p> <ul> <li>CRUD Operations - Create, read, update, delete patterns</li> <li>Authentication - JWT tokens, API keys, session management</li> <li>Data Validation - Request validation and error handling</li> <li>Pagination - Efficient data pagination strategies</li> <li>File Uploads - Handle file uploads and storage</li> </ul>"},{"location":"examples/#security","title":"\ud83d\udd12 Security","text":"<p>Security-focused examples:</p> <ul> <li>CORS Configuration - Cross-origin resource sharing</li> <li>Rate Limiting - Prevent abuse and ensure fair usage</li> <li>Authentication Middleware - Protect routes and validate users</li> <li>Input Sanitization - Prevent injection attacks</li> <li>Security Headers - HSTS, CSP, and other protective headers</li> </ul>"},{"location":"examples/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>Architectural patterns and code organization:</p> <ul> <li>Modular Routers - Organize large applications</li> <li>Dependency Injection - Manage dependencies cleanly</li> <li>Configuration Management - Environment-based configuration</li> <li>Database Patterns - Connection pooling and transaction management</li> <li>Testing Strategies - Unit and integration testing</li> </ul>"},{"location":"examples/#integration","title":"\ud83d\udd27 Integration","text":"<p>Integration with external services:</p> <ul> <li>Database Integration - SQL and NoSQL databases</li> <li>External APIs - Consume third-party services</li> <li>Message Queues - Background task processing</li> <li>Caching - Redis and in-memory caching strategies</li> <li>Monitoring - Logging, metrics, and health checks</li> </ul>"},{"location":"examples/#running-examples","title":"Running Examples","text":"<p>Each example includes instructions for running the code:</p>"},{"location":"examples/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/nordxai/Artanis\ncd Artanis\n</code></pre>"},{"location":"examples/#2-set-up-environment","title":"2. Set Up Environment","text":"<pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -e \".[dev]\"\n</code></pre>"},{"location":"examples/#3-run-examples","title":"3. Run Examples","text":"<pre><code># Run the blog API example\ncd docs/examples/blog_api\npython app.py\n\n# Run middleware demo\ncd ../middleware_demo\npython app.py\n\n# Run router patterns\ncd ../router_patterns\npython app.py\n</code></pre>"},{"location":"examples/#example-structure","title":"Example Structure","text":"<p>Each example follows this structure:</p> <pre><code>example_name/\n\u251c\u2500\u2500 app.py              # Main application\n\u251c\u2500\u2500 requirements.txt    # Dependencies\n\u251c\u2500\u2500 README.md          # Documentation\n\u251c\u2500\u2500 routes/            # Route modules (if applicable)\n\u251c\u2500\u2500 middleware/        # Custom middleware (if applicable)\n\u251c\u2500\u2500 models/           # Data models (if applicable)\n\u2514\u2500\u2500 tests/            # Test files (if applicable)\n</code></pre>"},{"location":"examples/#testing-examples","title":"Testing Examples","text":"<p>All examples include tests that you can run:</p> <pre><code>cd docs/examples/blog_api\npython -m pytest tests/ -v\n</code></pre>"},{"location":"examples/#contributing-examples","title":"Contributing Examples","text":"<p>Have a great example to share? We'd love to include it!</p> <ol> <li>Follow the structure - Use the standard example layout</li> <li>Include documentation - Clear README with setup instructions</li> <li>Add tests - Verify your example works correctly</li> <li>Submit a PR - Open a pull request with your example</li> </ol> <p>See our contributing guide for more details.</p>"},{"location":"examples/#getting-help","title":"Getting Help","text":"<p>If you have questions about any example:</p> <ol> <li>Check the README - Each example has detailed documentation</li> <li>Review the code - All examples include comprehensive comments</li> <li>Run the tests - Tests show expected behavior</li> <li>Open an issue - Ask questions on GitHub Issues</li> </ol> <p>These examples demonstrate the flexibility and power of Artanis for building modern web applications. Start with the simpler examples and work your way up to more complex patterns!</p>"},{"location":"examples/blog-api/","title":"Blog API Example","text":"<p>A complete blog API demonstrating production-ready patterns with Artanis framework.</p>"},{"location":"examples/blog-api/#features","title":"Features","text":"<ul> <li>User Authentication: JWT-based registration, login, and profile management</li> <li>Blog Post Management: Full CRUD operations with search, filtering, and pagination</li> <li>Content Organization: Categories and tags system</li> <li>File Uploads: Featured image handling for posts</li> <li>Security Middleware: CORS, rate limiting, security headers</li> <li>Input Validation: Comprehensive validation with detailed error messages</li> <li>Production Ready: Environment configuration, logging, and error handling</li> </ul>"},{"location":"examples/blog-api/#project-structure","title":"Project Structure","text":"<pre><code>blog_api/\n\u251c\u2500\u2500 app.py                  # Main application with configuration and routing\n\u251c\u2500\u2500 requirements.txt        # Project dependencies\n\u251c\u2500\u2500 routes/                # API route modules\n\u2502   \u251c\u2500\u2500 auth.py           # Authentication endpoints (register, login, logout)\n\u2502   \u2514\u2500\u2500 posts.py          # Blog post endpoints (CRUD, search, upload)\n\u251c\u2500\u2500 middleware/           # Custom middleware\n\u2502   \u2514\u2500\u2500 auth.py          # Authentication middleware (placeholder)\n\u251c\u2500\u2500 utils/               # Utility modules\n\u2502   \u251c\u2500\u2500 validation.py    # Input validation functions\n\u2502   \u251c\u2500\u2500 security.py      # Password hashing, JWT, HTML sanitization\n\u2502   \u2514\u2500\u2500 database.py      # Database connection utilities\n\u2514\u2500\u2500 uploads/             # File upload directory\n</code></pre>"},{"location":"examples/blog-api/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Clone and navigate:    <pre><code>git clone https://github.com/nordxai/Artanis\ncd Artanis/docs/examples/blog_api\n</code></pre></p> </li> <li> <p>Create virtual environment:    <pre><code>python3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Start the server:    <pre><code>python app.py\n# OR\nuvicorn app:app --host 127.0.0.1 --port 3000\n</code></pre></p> </li> <li> <p>Test the API:    <pre><code>curl http://127.0.0.1:3000/health\ncurl http://127.0.0.1:3000/docs\n</code></pre></p> </li> </ol>"},{"location":"examples/blog-api/#api-endpoints","title":"API Endpoints","text":""},{"location":"examples/blog-api/#core-endpoints","title":"Core Endpoints","text":"<ul> <li><code>GET /</code> - API information and available endpoints</li> <li><code>GET /health</code> - Health check endpoint</li> <li><code>GET /docs</code> - API documentation</li> </ul>"},{"location":"examples/blog-api/#authentication-apiv1auth","title":"Authentication (<code>/api/v1/auth</code>)","text":"<ul> <li><code>POST /register</code> - User registration</li> <li><code>POST /login</code> - User login and get JWT token</li> <li><code>POST /logout</code> - User logout (blacklist token)</li> <li><code>POST /refresh</code> - Refresh JWT token</li> <li><code>GET /me</code> - Get current user profile</li> <li><code>PUT /me</code> - Update current user profile</li> <li><code>POST /change-password</code> - Change user password</li> <li><code>GET /stats</code> - Authentication statistics</li> </ul>"},{"location":"examples/blog-api/#blog-posts-apiv1posts","title":"Blog Posts (<code>/api/v1/posts</code>)","text":"<ul> <li><code>GET /</code> - List posts with filtering, search, and pagination</li> <li><code>POST /</code> - Create new post (authentication required)</li> <li><code>GET /{id}</code> - Get specific post by ID or slug</li> <li><code>PUT /{id}</code> - Update post (authentication + ownership required)</li> <li><code>DELETE /{id}</code> - Delete post (authentication + ownership required)</li> <li><code>POST /{id}/like</code> - Like a post (authentication required)</li> <li><code>POST /{id}/upload-image</code> - Upload featured image (authentication required)</li> <li><code>GET /categories</code> - Get all available categories with post counts</li> <li><code>GET /tags</code> - Get all tags with usage counts</li> <li><code>GET /stats</code> - Get blog statistics</li> </ul>"},{"location":"examples/blog-api/#key-features-demonstrated","title":"Key Features Demonstrated","text":""},{"location":"examples/blog-api/#1-authentication-authorization","title":"1. Authentication &amp; Authorization","text":"<ul> <li>JWT token-based authentication with expiration</li> <li>User registration and login system</li> <li>Token refresh and blacklisting</li> <li>Password hashing with secure algorithms</li> <li>Profile management endpoints</li> </ul>"},{"location":"examples/blog-api/#2-data-validation-security","title":"2. Data Validation &amp; Security","text":"<ul> <li>Comprehensive input validation with detailed error messages</li> <li>Email, username, and password strength validation</li> <li>HTML content sanitization for XSS prevention</li> <li>File upload validation with type and size checks</li> <li>Request validation for all endpoints</li> </ul>"},{"location":"examples/blog-api/#3-middleware-integration","title":"3. Middleware Integration","text":"<ul> <li>Exception handling middleware with debug mode</li> <li>Security headers middleware for production</li> <li>Rate limiting to prevent API abuse</li> <li>CORS configuration for cross-origin requests</li> <li>Request logging for development</li> </ul>"},{"location":"examples/blog-api/#4-blog-management-system","title":"4. Blog Management System","text":"<ul> <li>Full CRUD operations for blog posts</li> <li>Search and filtering with multiple criteria</li> <li>Pagination with configurable page sizes</li> <li>Categories and tags organization</li> <li>Post statistics and analytics</li> <li>Slug generation for SEO-friendly URLs</li> </ul>"},{"location":"examples/blog-api/#5-file-upload-handling","title":"5. File Upload Handling","text":"<ul> <li>Featured image uploads for posts</li> <li>File validation and secure storage</li> <li>Image processing and management</li> <li>Upload directory organization</li> </ul>"},{"location":"examples/blog-api/#6-production-ready-features","title":"6. Production-Ready Features","text":"<ul> <li>Environment-based configuration</li> <li>Structured logging with JSON output</li> <li>Health check endpoints</li> <li>API documentation endpoints</li> <li>Error handling with proper HTTP status codes</li> </ul>"},{"location":"examples/blog-api/#example-usage","title":"Example Usage","text":""},{"location":"examples/blog-api/#1-user-registration","title":"1. User Registration","text":"<pre><code>curl -X POST http://127.0.0.1:3000/api/v1/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"bloguser\",\n    \"email\": \"user@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"full_name\": \"Blog User\"\n  }'\n</code></pre>"},{"location":"examples/blog-api/#2-user-login","title":"2. User Login","text":"<pre><code>curl -X POST http://127.0.0.1:3000/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"bloguser\",\n    \"password\": \"SecurePass123!\"\n  }'\n</code></pre>"},{"location":"examples/blog-api/#3-create-blog-post-with-jwt-token","title":"3. Create Blog Post (with JWT token)","text":"<pre><code>curl -X POST http://127.0.0.1:3000/api/v1/posts \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -d '{\n    \"title\": \"My First Blog Post\",\n    \"content\": \"This is the content of my first blog post...\",\n    \"summary\": \"A brief summary of the post\",\n    \"category\": \"Technology\",\n    \"tags\": [\"artanis\", \"python\", \"web\"],\n    \"status\": \"published\"\n  }'\n</code></pre>"},{"location":"examples/blog-api/#4-search-posts","title":"4. Search Posts","text":"<pre><code># Search posts with filtering\ncurl \"http://127.0.0.1:3000/api/v1/posts?search=artanis&amp;category=Technology&amp;page=1&amp;per_page=5\"\n\n# Get all categories\ncurl \"http://127.0.0.1:3000/api/v1/posts/categories\"\n\n# Get blog statistics\ncurl \"http://127.0.0.1:3000/api/v1/posts/stats\"\n</code></pre>"},{"location":"examples/blog-api/#configuration","title":"Configuration","text":"<p>The application supports environment-based configuration:</p> <pre><code># Development settings\nexport ENVIRONMENT=\"development\"\nexport DEBUG=\"true\"\nexport HOST=\"127.0.0.1\"\nexport PORT=\"3000\"\n\n# Security settings\nexport SECRET_KEY=\"your-secret-key-change-in-production\"\nexport JWT_ALGORITHM=\"HS256\"\nexport JWT_EXPIRES_IN=\"3600\"\n\n# Database settings\nexport DATABASE_URL=\"sqlite:///blog.db\"\n\n# Upload settings\nexport UPLOAD_DIR=\"uploads\"\nexport MAX_FILE_SIZE=\"5242880\"  # 5MB\n\n# CORS settings\nexport CORS_ORIGINS=\"http://localhost:3000,http://127.0.0.1:3000\"\n\n# Rate limiting\nexport RATE_LIMIT_REQUESTS=\"100\"\nexport RATE_LIMIT_WINDOW=\"3600\"\n\n# Logging\nexport LOG_LEVEL=\"INFO\"\n</code></pre>"},{"location":"examples/blog-api/#security-considerations","title":"Security Considerations","text":"<ul> <li>Authentication: JWT tokens with expiration and refresh mechanism</li> <li>Password Security: SHA-256 hashing (use bcrypt in production)</li> <li>Input Validation: Comprehensive validation with detailed error messages</li> <li>Rate Limiting: Prevents API abuse and DoS attacks</li> <li>CORS Configuration: Configurable cross-origin request handling</li> <li>Content Sanitization: HTML content cleaning to prevent XSS</li> <li>File Upload Security: Type and size validation for uploads</li> </ul> <p>This example demonstrates the complete implementation of a production-ready blog API using Artanis framework with modern security practices and comprehensive feature set.</p>"},{"location":"examples/middleware-demo/","title":"Middleware Demo","text":"<p>A comprehensive demonstration of Artanis middleware capabilities, showcasing various middleware patterns and security implementations.</p>"},{"location":"examples/middleware-demo/#overview","title":"Overview","text":"<p>This example demonstrates:</p> <ul> <li>Security Middleware: CORS, rate limiting, security headers</li> <li>Authentication Middleware: JWT token validation</li> <li>Logging Middleware: Request/response logging</li> <li>Custom Middleware: Application-specific functionality</li> <li>Error Handling: Comprehensive error middleware</li> <li>Middleware Chaining: Proper execution order</li> </ul>"},{"location":"examples/middleware-demo/#features","title":"Features","text":""},{"location":"examples/middleware-demo/#security-middleware","title":"\ud83d\udee1\ufe0f Security Middleware","text":"<ul> <li>CORS Configuration: Cross-origin resource sharing</li> <li>Rate Limiting: Prevent API abuse</li> <li>Security Headers: HSTS, CSP, X-Frame-Options</li> <li>Content Security Policy: XSS protection</li> <li>Request Validation: Input sanitization</li> </ul>"},{"location":"examples/middleware-demo/#logging-monitoring","title":"\ud83d\udcca Logging &amp; Monitoring","text":"<ul> <li>Request Logging: Detailed request/response tracking</li> <li>Performance Metrics: Response time measurement</li> <li>Error Logging: Structured error information</li> <li>Access Logs: IP tracking and user agent logging</li> </ul>"},{"location":"examples/middleware-demo/#authentication","title":"\ud83d\udd10 Authentication","text":"<ul> <li>JWT Middleware: Token validation</li> <li>User Context: Request user injection</li> <li>Permission Checking: Role-based access</li> <li>Session Management: Token refresh handling</li> </ul>"},{"location":"examples/middleware-demo/#project-structure","title":"Project Structure","text":"<pre><code>middleware_demo/\n\u251c\u2500\u2500 app.py                    # Main application\n\u251c\u2500\u2500 middleware/\n\u2502   \u251c\u2500\u2500 __init__.py          # Middleware exports\n\u2502   \u251c\u2500\u2500 security.py          # Security middleware implementations\n\u2502   \u251c\u2500\u2500 auth.py             # Authentication middleware\n\u2502   \u251c\u2500\u2500 logging.py          # Request logging middleware\n\u2502   \u2514\u2500\u2500 validation.py       # Input validation middleware\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 jwt_helper.py       # JWT token utilities\n    \u2514\u2500\u2500 rate_limiter.py     # Rate limiting implementation\n</code></pre>"},{"location":"examples/middleware-demo/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Navigate to the demo:    <pre><code>git clone https://github.com/nordxai/Artanis\ncd Artanis/docs/examples/middleware_demo\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install artanis uvicorn[standard]\n</code></pre></p> </li> <li> <p>Run the demo:    <pre><code>python app.py\n</code></pre></p> </li> <li> <p>Test middleware:    <pre><code># Test basic endpoint\ncurl http://127.0.0.1:8000/\n\n# Test rate limiting\nfor i in {1..10}; do curl http://127.0.0.1:8000/api/data; done\n\n# Test authentication\ncurl -H \"Authorization: Bearer invalid-token\" http://127.0.0.1:8000/api/protected\n</code></pre></p> </li> </ol>"},{"location":"examples/middleware-demo/#middleware-examples","title":"Middleware Examples","text":""},{"location":"examples/middleware-demo/#1-cors-middleware","title":"1. CORS Middleware","text":"<pre><code>async def cors_middleware(request, response, next):\n    \"\"\"Comprehensive CORS middleware with preflight support.\"\"\"\n    origin = request.headers.get('origin')\n\n    # Handle preflight requests\n    if request.scope.get('method') == 'OPTIONS':\n        response.headers.update({\n            'Access-Control-Allow-Origin': origin or '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n            'Access-Control-Max-Age': '3600'\n        })\n        response.status = 200\n        return\n\n    await next()\n\n    # Add CORS headers to actual response\n    response.headers.update({\n        'Access-Control-Allow-Origin': origin or '*',\n        'Access-Control-Allow-Credentials': 'true'\n    })\n</code></pre>"},{"location":"examples/middleware-demo/#2-rate-limiting-middleware","title":"2. Rate Limiting Middleware","text":"<pre><code>import time\nfrom collections import defaultdict\n\n# Simple in-memory rate limiter\nrate_limits = defaultdict(list)\n\nasync def rate_limit_middleware(request, response, next):\n    \"\"\"Rate limiting middleware with configurable limits.\"\"\"\n    client_ip = request.scope.get('client', ['unknown'])[0]\n    now = time.time()\n    window = 60  # 1 minute\n    max_requests = 100\n\n    # Clean old requests\n    rate_limits[client_ip] = [\n        req_time for req_time in rate_limits[client_ip]\n        if now - req_time &lt; window\n    ]\n\n    # Check rate limit\n    if len(rate_limits[client_ip]) &gt;= max_requests:\n        response.status = 429\n        response.body = {\n            \"error\": \"Rate limit exceeded\",\n            \"retry_after\": window\n        }\n        return\n\n    # Record this request\n    rate_limits[client_ip].append(now)\n    await next()\n</code></pre>"},{"location":"examples/middleware-demo/#3-security-headers-middleware","title":"3. Security Headers Middleware","text":"<pre><code>async def security_headers_middleware(request, response, next):\n    \"\"\"Add comprehensive security headers.\"\"\"\n    await next()\n\n    response.headers.update({\n        'X-Content-Type-Options': 'nosniff',\n        'X-Frame-Options': 'DENY',\n        'X-XSS-Protection': '1; mode=block',\n        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n        'Content-Security-Policy': \"default-src 'self'; script-src 'self'\",\n        'Referrer-Policy': 'strict-origin-when-cross-origin'\n    })\n</code></pre>"},{"location":"examples/middleware-demo/#4-request-logging-middleware","title":"4. Request Logging Middleware","text":"<pre><code>import time\nimport json\nimport logging\n\nlogger = logging.getLogger('artanis.requests')\n\nasync def request_logging_middleware(request, response, next):\n    \"\"\"Comprehensive request logging with metrics.\"\"\"\n    start_time = time.time()\n\n    # Log request\n    request_data = {\n        'method': request.scope.get('method'),\n        'path': request.scope.get('path'),\n        'query_string': request.scope.get('query_string', b'').decode(),\n        'user_agent': request.headers.get('user-agent', 'Unknown'),\n        'client_ip': request.scope.get('client', ['unknown'])[0],\n        'timestamp': time.time()\n    }\n\n    logger.info(f\"\u2192 {request_data['method']} {request_data['path']}\")\n\n    await next()\n\n    # Log response\n    duration = time.time() - start_time\n    response_data = {\n        'status': response.status,\n        'duration': f\"{duration:.3f}s\",\n        'response_size': len(str(response.body)) if response.body else 0\n    }\n\n    logger.info(f\"\u2190 {request_data['method']} {request_data['path']} \"\n                f\"{response_data['status']} ({response_data['duration']})\")\n\n    # Add performance headers\n    response.headers['X-Response-Time'] = response_data['duration']\n</code></pre>"},{"location":"examples/middleware-demo/#5-authentication-middleware","title":"5. Authentication Middleware","text":"<pre><code>import jwt\n\nasync def auth_middleware(request, response, next):\n    \"\"\"JWT authentication middleware.\"\"\"\n    auth_header = request.headers.get('authorization', '')\n\n    if not auth_header.startswith('Bearer '):\n        response.status = 401\n        response.body = {\"error\": \"Missing or invalid authorization header\"}\n        return\n\n    token = auth_header[7:]  # Remove 'Bearer ' prefix\n\n    try:\n        payload = jwt.decode(token, 'secret-key', algorithms=['HS256'])\n        request.user = payload  # Add user info to request\n        await next()\n    except jwt.ExpiredSignatureError:\n        response.status = 401\n        response.body = {\"error\": \"Token has expired\"}\n    except jwt.InvalidTokenError:\n        response.status = 401\n        response.body = {\"error\": \"Invalid token\"}\n</code></pre>"},{"location":"examples/middleware-demo/#6-error-handling-middleware","title":"6. Error Handling Middleware","text":"<pre><code>import traceback\nimport logging\n\nlogger = logging.getLogger('artanis.errors')\n\nasync def error_handling_middleware(request, response, next):\n    \"\"\"Comprehensive error handling and logging.\"\"\"\n    try:\n        await next()\n    except ValidationError as e:\n        logger.warning(f\"Validation error: {e}\")\n        response.status = 400\n        response.body = {\n            \"error\": \"Validation failed\",\n            \"message\": str(e),\n            \"field\": getattr(e, 'field', None)\n        }\n    except PermissionError as e:\n        logger.warning(f\"Permission denied: {e}\")\n        response.status = 403\n        response.body = {\n            \"error\": \"Permission denied\",\n            \"message\": \"You don't have permission to access this resource\"\n        }\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")\n        logger.error(traceback.format_exc())\n\n        response.status = 500\n        response.body = {\n            \"error\": \"Internal server error\",\n            \"message\": \"An unexpected error occurred\"\n        }\n</code></pre>"},{"location":"examples/middleware-demo/#middleware-chain-example","title":"Middleware Chain Example","text":"<pre><code>from artanis import App\n\napp = App()\n\n# Apply middleware in order (first registered = outermost)\napp.use(error_handling_middleware)     # Catch all errors\napp.use(request_logging_middleware)    # Log all requests\napp.use(security_headers_middleware)   # Add security headers\napp.use(cors_middleware)              # Handle CORS\napp.use(rate_limit_middleware)        # Rate limiting\n\n# Path-specific middleware\napp.use(\"/api\", rate_limit_middleware)        # API rate limiting\napp.use(\"/api/protected\", auth_middleware)    # Authentication required\n\n# Routes\nasync def public_endpoint():\n    return {\"message\": \"This is public\", \"middleware\": \"basic\"}\n\nasync def protected_endpoint(request):\n    return {\n        \"message\": \"This is protected\",\n        \"user\": request.user,\n        \"middleware\": \"auth + basic\"\n    }\n\napp.get(\"/\", public_endpoint)\napp.get(\"/api/protected/data\", protected_endpoint)\n</code></pre>"},{"location":"examples/middleware-demo/#testing-middleware","title":"Testing Middleware","text":""},{"location":"examples/middleware-demo/#1-test-cors","title":"1. Test CORS","text":"<pre><code>curl -H \"Origin: http://localhost:3000\" \\\n     -H \"Access-Control-Request-Method: POST\" \\\n     -H \"Access-Control-Request-Headers: Content-Type\" \\\n     -X OPTIONS http://127.0.0.1:8000/api/data\n</code></pre>"},{"location":"examples/middleware-demo/#2-test-rate-limiting","title":"2. Test Rate Limiting","text":"<pre><code># Exceed rate limit\nfor i in {1..110}; do\n  curl -s http://127.0.0.1:8000/api/data | head -1\ndone\n</code></pre>"},{"location":"examples/middleware-demo/#3-test-authentication","title":"3. Test Authentication","text":"<pre><code># Without token (should fail)\ncurl http://127.0.0.1:8000/api/protected/data\n\n# With invalid token (should fail)\ncurl -H \"Authorization: Bearer invalid-token\" \\\n     http://127.0.0.1:8000/api/protected/data\n\n# Generate valid token first, then test\n# (Implementation depends on your JWT setup)\n</code></pre>"},{"location":"examples/middleware-demo/#4-test-security-headers","title":"4. Test Security Headers","text":"<pre><code>curl -I http://127.0.0.1:8000/\n# Check for security headers in response\n</code></pre>"},{"location":"examples/middleware-demo/#middleware-best-practices","title":"Middleware Best Practices","text":""},{"location":"examples/middleware-demo/#1-order-matters","title":"1. Order Matters","text":"<pre><code># Correct order:\napp.use(error_handling_middleware)    # 1. Catch errors first\napp.use(logging_middleware)          # 2. Log everything\napp.use(security_middleware)         # 3. Apply security\napp.use(auth_middleware)             # 4. Check authentication\n# Routes come last\n</code></pre>"},{"location":"examples/middleware-demo/#2-path-specific-middleware","title":"2. Path-Specific Middleware","text":"<pre><code># Apply middleware only to specific paths\napp.use(\"/api\", rate_limit_middleware)\napp.use(\"/admin\", admin_auth_middleware)\napp.use(\"/uploads\", file_validation_middleware)\n</code></pre>"},{"location":"examples/middleware-demo/#3-conditional-middleware","title":"3. Conditional Middleware","text":"<pre><code>async def conditional_middleware(request, response, next):\n    if should_apply_logic(request):\n        # Apply middleware logic\n        await next()\n    else:\n        # Skip middleware, go to next\n        await next()\n</code></pre>"},{"location":"examples/middleware-demo/#4-middleware-configuration","title":"4. Middleware Configuration","text":"<pre><code>def create_rate_limiter(max_requests=100, window=60):\n    async def rate_limit_middleware(request, response, next):\n        # Use max_requests and window parameters\n        # ... implementation\n        pass\n    return rate_limit_middleware\n\napp.use(create_rate_limiter(max_requests=50, window=300))\n</code></pre>"},{"location":"examples/middleware-demo/#production-considerations","title":"Production Considerations","text":"<ul> <li>Performance: Minimize middleware overhead</li> <li>Logging: Use structured logging (JSON)</li> <li>Rate Limiting: Use Redis for distributed rate limiting</li> <li>Authentication: Implement proper JWT validation</li> <li>Security: Regular security header updates</li> <li>Monitoring: Add metrics and alerting</li> </ul> <p>This middleware demo showcases the power and flexibility of Artanis middleware system for building secure, monitored, and well-structured web applications.</p>"},{"location":"examples/router-patterns/","title":"Router Patterns Example","text":"<p>This example demonstrates advanced routing patterns with the Artanis framework, showcasing how to build complex, hierarchical routing structures that scale well for large applications.</p>"},{"location":"examples/router-patterns/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Router Creation and Mounting: Create modular router instances and mount them at specific paths</li> <li>Nested Routing Structures: Build complex URL hierarchies with multiple levels</li> <li>Path Parameter Patterns: Extract parameters from URLs at any nesting level</li> <li>Route Organization: Separate concerns by grouping related routes together</li> <li>Subrouter Patterns: Create reusable routing components</li> </ul>"},{"location":"examples/router-patterns/#architecture","title":"Architecture","text":""},{"location":"examples/router-patterns/#routing-structure","title":"Routing Structure","text":"<pre><code>Main App\n\u251c\u2500\u2500 GET /                          # API root with routing information\n\u251c\u2500\u2500 GET /health                    # Health check endpoint\n\u251c\u2500\u2500 /api/v1/ (Router)             # API version 1 router\n\u2502   \u251c\u2500\u2500 /users/ (Router)          # User management\n\u2502   \u2502   \u251c\u2500\u2500 GET /                 # List all users\n\u2502   \u2502   \u251c\u2500\u2500 GET /{user_id}        # Get specific user\n\u2502   \u2502   \u2514\u2500\u2500 POST /                # Create new user\n\u2502   \u251c\u2500\u2500 /users/{user_id}/posts/   # User posts subrouter (nested parameters)\n\u2502   \u2502   \u251c\u2500\u2500 GET /                 # Get user's posts\n\u2502   \u2502   \u2514\u2500\u2500 POST /                # Create post for user\n\u2502   \u251c\u2500\u2500 /posts/ (Router)          # Posts management\n\u2502   \u2502   \u251c\u2500\u2500 GET /                 # List all posts\n\u2502   \u2502   \u2514\u2500\u2500 GET /{post_id}        # Get specific post\n\u2502   \u2514\u2500\u2500 /posts/{post_id}/comments/ # Post comments subrouter (nested parameters)\n\u2502       \u251c\u2500\u2500 GET /                 # Get post comments\n\u2502       \u2514\u2500\u2500 POST /                # Create comment on post\n\u2514\u2500\u2500 /admin/ (Router)              # Admin panel\n    \u251c\u2500\u2500 GET /                     # Admin dashboard\n    \u251c\u2500\u2500 GET /stats                # System statistics\n    \u251c\u2500\u2500 GET /users                # User management\n    \u2514\u2500\u2500 GET /posts                # Post management\n</code></pre>"},{"location":"examples/router-patterns/#key-concepts","title":"Key Concepts","text":"<ol> <li>Router Creation: <code>Router()</code> creates a new router instance for organizing related routes</li> <li>Route Registration: Use <code>router.get()</code>, <code>router.post()</code>, etc. to register routes on specific routers</li> <li>Router Mounting: <code>app.mount(path, router)</code> mounts a router at a specific path prefix</li> <li>Nested Parameters: Paths like <code>/users/{user_id}/posts</code> allow parameter extraction at mount level</li> <li>Path Inheritance: Mount paths combine with route paths for final URL resolution</li> <li>Parameter Access: Parameters from mount paths are available in route handlers</li> </ol>"},{"location":"examples/router-patterns/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Navigate to the example:    <pre><code>git clone https://github.com/nordxai/Artanis\ncd Artanis/docs/examples/router_patterns\n</code></pre></p> </li> <li> <p>Run the application:    <pre><code>python app.py\n</code></pre></p> </li> <li> <p>Test the routes:    <pre><code>curl http://127.0.0.1:8000/\n</code></pre></p> </li> </ol>"},{"location":"examples/router-patterns/#testing-the-api","title":"Testing the API","text":""},{"location":"examples/router-patterns/#basic-endpoints","title":"Basic Endpoints","text":"<pre><code># API root - shows routing structure\ncurl http://127.0.0.1:8000/\n\n# Health check\ncurl http://127.0.0.1:8000/health\n</code></pre>"},{"location":"examples/router-patterns/#user-management","title":"User Management","text":"<pre><code># List all users\ncurl http://127.0.0.1:8000/api/v1/users\n\n# Get specific user\ncurl http://127.0.0.1:8000/api/v1/users/1\n\n# Create new user\ncurl -X POST http://127.0.0.1:8000/api/v1/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"newuser\", \"email\": \"newuser@example.com\"}'\n</code></pre>"},{"location":"examples/router-patterns/#user-posts-nested-routing","title":"User Posts (Nested Routing)","text":"<pre><code># Get posts for specific user\ncurl http://127.0.0.1:8000/api/v1/users/1/posts\n\n# Create post for specific user\ncurl -X POST http://127.0.0.1:8000/api/v1/users/1/posts \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"title\": \"My New Post\", \"content\": \"This is the content of my post.\"}'\n</code></pre>"},{"location":"examples/router-patterns/#posts-management","title":"Posts Management","text":"<pre><code># List all posts with author information\ncurl http://127.0.0.1:8000/api/v1/posts\n\n# Get specific post with comments\ncurl http://127.0.0.1:8000/api/v1/posts/1\n</code></pre>"},{"location":"examples/router-patterns/#post-comments-nested-routing","title":"Post Comments (Nested Routing)","text":"<pre><code># Get comments for specific post\ncurl http://127.0.0.1:8000/api/v1/posts/1/comments\n\n# Create comment on specific post\ncurl -X POST http://127.0.0.1:8000/api/v1/posts/1/comments \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"content\": \"Great post!\", \"user_id\": 2}'\n</code></pre>"},{"location":"examples/router-patterns/#admin-panel","title":"Admin Panel","text":"<pre><code># Admin dashboard\ncurl http://127.0.0.1:8000/admin\n\n# System statistics\ncurl http://127.0.0.1:8000/admin/stats\n\n# Admin user management\ncurl http://127.0.0.1:8000/admin/users\n\n# Admin post management\ncurl http://127.0.0.1:8000/admin/posts\n</code></pre>"},{"location":"examples/router-patterns/#router-implementation","title":"Router Implementation","text":""},{"location":"examples/router-patterns/#basic-router-creation","title":"Basic Router Creation","text":"<pre><code>from artanis import App, Router\n\napp = App()\n\n# Create routers for different domains\nusers_router = Router()\nposts_router = Router()\nadmin_router = Router()\n\n# Register routes on specific routers\nusers_router.get(\"/\", list_users)\nusers_router.get(\"/{user_id}\", get_user)\nusers_router.post(\"/\", create_user)\n\n# Mount routers to main application\napp.mount(\"/api/v1/users\", users_router)\napp.mount(\"/api/v1/posts\", posts_router)\napp.mount(\"/admin\", admin_router)\n</code></pre>"},{"location":"examples/router-patterns/#nested-parameter-routing","title":"Nested Parameter Routing","text":"<pre><code># User posts router (receives user_id from mount path)\nuser_posts_router = Router()\n\nasync def get_user_posts(user_id: str):\n    \"\"\"Get posts for a specific user.\"\"\"\n    return {\n        \"user_id\": user_id,\n        \"posts\": [post for post in posts if post[\"user_id\"] == user_id]\n    }\n\nasync def create_user_post(user_id: str, request):\n    \"\"\"Create a post for a specific user.\"\"\"\n    data = await request.json()\n    new_post = {\n        \"id\": len(posts) + 1,\n        \"user_id\": user_id,\n        \"title\": data[\"title\"],\n        \"content\": data[\"content\"],\n        \"created_at\": \"2024-01-15T10:30:00Z\"\n    }\n    posts.append(new_post)\n    return {\"message\": \"Post created\", \"post\": new_post}\n\nuser_posts_router.get(\"/\", get_user_posts)\nuser_posts_router.post(\"/\", create_user_post)\n\n# Mount with parameter path\napp.mount(\"/api/v1/users/{user_id}/posts\", user_posts_router)\n</code></pre>"},{"location":"examples/router-patterns/#multi-level-router-hierarchy","title":"Multi-Level Router Hierarchy","text":"<pre><code># Create hierarchical structure\napi_router = Router()\nv1_router = Router()\nv2_router = Router()\n\n# V1 routes\nv1_router.mount(\"/users\", users_v1_router)\nv1_router.mount(\"/posts\", posts_v1_router)\n\n# V2 routes (different implementation)\nv2_router.mount(\"/users\", users_v2_router)\nv2_router.mount(\"/posts\", posts_v2_router)\n\n# Mount versions to API router\napi_router.mount(\"/v1\", v1_router)\napi_router.mount(\"/v2\", v2_router)\n\n# Mount API router to main app\napp.mount(\"/api\", api_router)\n\n# Final paths:\n# /api/v1/users/\n# /api/v1/posts/\n# /api/v2/users/\n# /api/v2/posts/\n</code></pre>"},{"location":"examples/router-patterns/#router-pattern-benefits","title":"Router Pattern Benefits","text":""},{"location":"examples/router-patterns/#1-organization","title":"1. Organization","text":"<p>Related routes are grouped together in logical units, making the codebase easier to navigate and maintain.</p>"},{"location":"examples/router-patterns/#2-modularity","title":"2. Modularity","text":"<p>Routers can be developed independently and reused across different applications or API versions.</p>"},{"location":"examples/router-patterns/#3-nested-routing","title":"3. Nested Routing","text":"<p>Complex URL structures with parameters can be handled elegantly with proper parameter extraction.</p>"},{"location":"examples/router-patterns/#4-separation-of-concerns","title":"4. Separation of Concerns","text":"<p>Each router handles one specific domain (users, posts, admin), promoting clean architecture.</p>"},{"location":"examples/router-patterns/#5-scalability","title":"5. Scalability","text":"<p>Easy to add new route groups without modifying existing code structure.</p>"},{"location":"examples/router-patterns/#6-maintainability","title":"6. Maintainability","text":"<p>Clear structure makes large applications easier to understand and modify.</p>"},{"location":"examples/router-patterns/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"examples/router-patterns/#parameter-inheritance","title":"Parameter Inheritance","text":"<pre><code># Mount path parameters are available in subrouter handlers\napi_v1.mount(\"/users/{user_id}/posts\", user_posts_router)\n\n# Handler receives both mount and route parameters\nasync def get_user_posts(user_id: str):\n    # user_id comes from the mount path /users/{user_id}/posts\n    # Additional route parameters would also be available\n    return {\"user_id\": user_id, \"posts\": get_posts_for_user(user_id)}\n</code></pre>"},{"location":"examples/router-patterns/#router-with-middleware","title":"Router with Middleware","text":"<pre><code># Apply middleware to entire router\nasync def auth_middleware(request, response, next):\n    if not request.headers.get('Authorization'):\n        response.status = 401\n        response.body = {\"error\": \"Authentication required\"}\n        return\n    await next()\n\n# Apply to admin router\napp.use(\"/admin\", auth_middleware)\nadmin_router = Router()\nadmin_router.get(\"/\", admin_dashboard)\napp.mount(\"/admin\", admin_router)\n</code></pre>"},{"location":"examples/router-patterns/#conditional-router-mounting","title":"Conditional Router Mounting","text":"<pre><code>import os\n\n# Environment-based router mounting\nif os.getenv('ENABLE_ADMIN', 'false').lower() == 'true':\n    app.mount(\"/admin\", admin_router)\n\nif os.getenv('API_VERSION', 'v1') == 'v2':\n    app.mount(\"/api\", v2_api_router)\nelse:\n    app.mount(\"/api\", v1_api_router)\n</code></pre>"},{"location":"examples/router-patterns/#best-practices","title":"Best Practices","text":"<ol> <li>Logical Grouping: Group related functionality in the same router</li> <li>Consistent Naming: Use clear, consistent router and path names</li> <li>Parameter Validation: Validate path parameters in handlers</li> <li>Error Handling: Provide meaningful error responses</li> <li>Documentation: Document your routing structure clearly</li> <li>Testing: Test all route combinations and parameter patterns</li> </ol>"},{"location":"examples/router-patterns/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>CORS Middleware: Included for cross-origin API access</li> <li>In-Memory Storage: Uses simple Python data structures for demonstration</li> <li>Parameter Validation: Basic validation with error handling</li> <li>Structured Responses: Consistent JSON response format</li> <li>Error Handling: Proper HTTP status codes and error messages</li> </ul> <p>This example serves as a comprehensive reference for implementing complex routing patterns in Artanis applications, demonstrating best practices for API organization and scalability.</p>"},{"location":"examples/blog_api/","title":"Blog API Example","text":"<p>A complete blog API demonstrating production-ready patterns with Artanis framework.</p>"},{"location":"examples/blog_api/#features","title":"Features","text":"<ul> <li>User Authentication: JWT-based registration, login, and profile management</li> <li>Blog Post Management: Full CRUD operations with search, filtering, and pagination</li> <li>Content Organization: Categories and tags system</li> <li>File Uploads: Featured image handling for posts</li> <li>Security Middleware: CORS, rate limiting, security headers</li> <li>Input Validation: Comprehensive validation with detailed error messages</li> <li>Production Ready: Environment configuration, logging, and error handling</li> </ul>"},{"location":"examples/blog_api/#project-structure","title":"Project Structure","text":"<pre><code>blog_api/\n\u251c\u2500\u2500 app.py                  # Main application with configuration and routing\n\u251c\u2500\u2500 requirements.txt        # Project dependencies\n\u251c\u2500\u2500 routes/                # API route modules\n\u2502   \u251c\u2500\u2500 auth.py           # Authentication endpoints (register, login, logout)\n\u2502   \u2514\u2500\u2500 posts.py          # Blog post endpoints (CRUD, search, upload)\n\u251c\u2500\u2500 middleware/           # Custom middleware\n\u2502   \u2514\u2500\u2500 auth.py          # Authentication middleware (placeholder)\n\u251c\u2500\u2500 utils/               # Utility modules\n\u2502   \u251c\u2500\u2500 validation.py    # Input validation functions\n\u2502   \u251c\u2500\u2500 security.py      # Password hashing, JWT, HTML sanitization\n\u2502   \u2514\u2500\u2500 database.py      # Database connection utilities\n\u2514\u2500\u2500 uploads/             # File upload directory\n</code></pre>"},{"location":"examples/blog_api/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Create virtual environment:    <pre><code>python3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install Artanis framework:    <pre><code>pip install -e ../../../  # Install from local src\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Start the server:    <pre><code>python app.py\n# OR\nuvicorn app:app --host 127.0.0.1 --port 3000\n</code></pre></p> </li> <li> <p>Test the API:    <pre><code>curl http://127.0.0.1:3000/health\ncurl http://127.0.0.1:3000/docs\n</code></pre></p> </li> </ol>"},{"location":"examples/blog_api/#api-endpoints","title":"API Endpoints","text":""},{"location":"examples/blog_api/#core-endpoints","title":"Core Endpoints","text":"<ul> <li><code>GET /</code> - API information and available endpoints</li> <li><code>GET /health</code> - Health check endpoint</li> <li><code>GET /docs</code> - API documentation</li> </ul>"},{"location":"examples/blog_api/#authentication-apiv1auth","title":"Authentication (<code>/api/v1/auth</code>)","text":"<ul> <li><code>POST /register</code> - User registration</li> <li><code>POST /login</code> - User login and get JWT token</li> <li><code>POST /logout</code> - User logout (blacklist token)</li> <li><code>POST /refresh</code> - Refresh JWT token</li> <li><code>GET /me</code> - Get current user profile</li> <li><code>PUT /me</code> - Update current user profile</li> <li><code>POST /change-password</code> - Change user password</li> <li><code>GET /stats</code> - Authentication statistics</li> </ul>"},{"location":"examples/blog_api/#blog-posts-apiv1posts","title":"Blog Posts (<code>/api/v1/posts</code>)","text":"<ul> <li><code>GET /</code> - List posts with filtering, search, and pagination</li> <li><code>POST /</code> - Create new post (authentication required)</li> <li><code>GET /{id}</code> - Get specific post by ID or slug</li> <li><code>PUT /{id}</code> - Update post (authentication + ownership required)</li> <li><code>DELETE /{id}</code> - Delete post (authentication + ownership required)</li> <li><code>POST /{id}/like</code> - Like a post (authentication required)</li> <li><code>POST /{id}/upload-image</code> - Upload featured image (authentication required)</li> <li><code>GET /categories</code> - Get all available categories with post counts</li> <li><code>GET /tags</code> - Get all tags with usage counts</li> <li><code>GET /stats</code> - Get blog statistics</li> </ul>"},{"location":"examples/blog_api/#key-features-demonstrated","title":"Key Features Demonstrated","text":""},{"location":"examples/blog_api/#1-authentication-authorization","title":"1. Authentication &amp; Authorization","text":"<ul> <li>JWT token-based authentication with expiration</li> <li>User registration and login system</li> <li>Token refresh and blacklisting</li> <li>Password hashing with secure algorithms</li> <li>Profile management endpoints</li> </ul>"},{"location":"examples/blog_api/#2-data-validation-security","title":"2. Data Validation &amp; Security","text":"<ul> <li>Comprehensive input validation with detailed error messages</li> <li>Email, username, and password strength validation</li> <li>HTML content sanitization for XSS prevention</li> <li>File upload validation with type and size checks</li> <li>Request validation for all endpoints</li> </ul>"},{"location":"examples/blog_api/#3-middleware-integration","title":"3. Middleware Integration","text":"<ul> <li>Exception handling middleware with debug mode</li> <li>Security headers middleware for production</li> <li>Rate limiting to prevent API abuse</li> <li>CORS configuration for cross-origin requests</li> <li>Request logging for development</li> </ul>"},{"location":"examples/blog_api/#4-blog-management-system","title":"4. Blog Management System","text":"<ul> <li>Full CRUD operations for blog posts</li> <li>Search and filtering with multiple criteria</li> <li>Pagination with configurable page sizes</li> <li>Categories and tags organization</li> <li>Post statistics and analytics</li> <li>Slug generation for SEO-friendly URLs</li> </ul>"},{"location":"examples/blog_api/#5-file-upload-handling","title":"5. File Upload Handling","text":"<ul> <li>Featured image uploads for posts</li> <li>File validation and secure storage</li> <li>Image processing and management</li> <li>Upload directory organization</li> </ul>"},{"location":"examples/blog_api/#6-production-ready-features","title":"6. Production-Ready Features","text":"<ul> <li>Environment-based configuration</li> <li>Structured logging with JSON output</li> <li>Health check endpoints</li> <li>API documentation endpoints</li> <li>Error handling with proper HTTP status codes</li> </ul>"},{"location":"examples/blog_api/#example-usage","title":"Example Usage","text":""},{"location":"examples/blog_api/#1-user-registration","title":"1. User Registration","text":"<pre><code>curl -X POST http://127.0.0.1:3000/api/v1/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"bloguser\",\n    \"email\": \"user@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"full_name\": \"Blog User\"\n  }'\n</code></pre>"},{"location":"examples/blog_api/#2-user-login","title":"2. User Login","text":"<pre><code>curl -X POST http://127.0.0.1:3000/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"bloguser\",\n    \"password\": \"SecurePass123!\"\n  }'\n</code></pre>"},{"location":"examples/blog_api/#3-create-blog-post-with-jwt-token","title":"3. Create Blog Post (with JWT token)","text":"<pre><code>curl -X POST http://127.0.0.1:3000/api/v1/posts \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -d '{\n    \"title\": \"My First Blog Post\",\n    \"content\": \"This is the content of my first blog post...\",\n    \"summary\": \"A brief summary of the post\",\n    \"category\": \"Technology\",\n    \"tags\": [\"artanis\", \"python\", \"web\"],\n    \"status\": \"published\"\n  }'\n</code></pre>"},{"location":"examples/blog_api/#4-search-posts","title":"4. Search Posts","text":"<pre><code># Search posts with filtering\ncurl \"http://127.0.0.1:3000/api/v1/posts?search=artanis&amp;category=Technology&amp;page=1&amp;per_page=5\"\n\n# Get all categories\ncurl \"http://127.0.0.1:3000/api/v1/posts/categories\"\n\n# Get blog statistics\ncurl \"http://127.0.0.1:3000/api/v1/posts/stats\"\n</code></pre>"},{"location":"examples/blog_api/#configuration","title":"Configuration","text":"<p>The application supports environment-based configuration:</p> <pre><code># Development settings\nexport ENVIRONMENT=\"development\"\nexport DEBUG=\"true\"\nexport HOST=\"127.0.0.1\"\nexport PORT=\"3000\"\n\n# Security settings\nexport SECRET_KEY=\"your-secret-key-change-in-production\"\nexport JWT_ALGORITHM=\"HS256\"\nexport JWT_EXPIRES_IN=\"3600\"\n\n# Database settings\nexport DATABASE_URL=\"sqlite:///blog.db\"\n\n# Upload settings\nexport UPLOAD_DIR=\"uploads\"\nexport MAX_FILE_SIZE=\"5242880\"  # 5MB\n\n# CORS settings\nexport CORS_ORIGINS=\"http://localhost:3000,http://127.0.0.1:3000\"\n\n# Rate limiting\nexport RATE_LIMIT_REQUESTS=\"100\"\nexport RATE_LIMIT_WINDOW=\"3600\"\n\n# Logging\nexport LOG_LEVEL=\"INFO\"\n</code></pre>"},{"location":"examples/blog_api/#data-storage","title":"Data Storage","text":"<p>This example uses in-memory storage for simplicity. In production, you would:</p> <ol> <li>Replace in-memory storage with proper database (PostgreSQL, MySQL)</li> <li>Add database migrations and schema management</li> <li>Implement connection pooling and transaction management</li> <li>Add data persistence for user sessions and post data</li> </ol>"},{"location":"examples/blog_api/#security-considerations","title":"Security Considerations","text":"<ul> <li>Authentication: JWT tokens with expiration and refresh mechanism</li> <li>Password Security: SHA-256 hashing (use bcrypt in production)</li> <li>Input Validation: Comprehensive validation with detailed error messages</li> <li>Rate Limiting: Prevents API abuse and DoS attacks</li> <li>CORS Configuration: Configurable cross-origin request handling</li> <li>Content Sanitization: HTML content cleaning to prevent XSS</li> <li>File Upload Security: Type and size validation for uploads</li> </ul> <p>This example demonstrates the complete implementation of a production-ready blog API using Artanis framework with modern security practices and comprehensive feature set.</p>"},{"location":"examples/router_patterns/","title":"Router Patterns Example","text":"<p>This example demonstrates advanced routing patterns with the Artanis framework, showcasing how to build complex, hierarchical routing structures that scale well for large applications.</p>"},{"location":"examples/router_patterns/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Router Creation and Mounting: Create modular router instances and mount them at specific paths</li> <li>Nested Routing Structures: Build complex URL hierarchies with multiple levels</li> <li>Path Parameter Patterns: Extract parameters from URLs at any nesting level</li> <li>Route Organization: Separate concerns by grouping related routes together</li> <li>Subrouter Patterns: Create reusable routing components</li> </ul>"},{"location":"examples/router_patterns/#architecture","title":"Architecture","text":""},{"location":"examples/router_patterns/#routing-structure","title":"Routing Structure","text":"<pre><code>Main App\n\u251c\u2500\u2500 GET /                          # API root with routing information\n\u251c\u2500\u2500 GET /health                    # Health check endpoint\n\u251c\u2500\u2500 /api/v1/ (Router)             # API version 1 router\n\u2502   \u251c\u2500\u2500 /users/ (Router)          # User management\n\u2502   \u2502   \u251c\u2500\u2500 GET /                 # List all users\n\u2502   \u2502   \u251c\u2500\u2500 GET /{user_id}        # Get specific user\n\u2502   \u2502   \u2514\u2500\u2500 POST /                # Create new user\n\u2502   \u251c\u2500\u2500 /users/{user_id}/posts/   # User posts subrouter (nested parameters)\n\u2502   \u2502   \u251c\u2500\u2500 GET /                 # Get user's posts\n\u2502   \u2502   \u2514\u2500\u2500 POST /                # Create post for user\n\u2502   \u251c\u2500\u2500 /posts/ (Router)          # Posts management\n\u2502   \u2502   \u251c\u2500\u2500 GET /                 # List all posts\n\u2502   \u2502   \u2514\u2500\u2500 GET /{post_id}        # Get specific post\n\u2502   \u2514\u2500\u2500 /posts/{post_id}/comments/ # Post comments subrouter (nested parameters)\n\u2502       \u251c\u2500\u2500 GET /                 # Get post comments\n\u2502       \u2514\u2500\u2500 POST /                # Create comment on post\n\u2514\u2500\u2500 /admin/ (Router)              # Admin panel\n    \u251c\u2500\u2500 GET /                     # Admin dashboard\n    \u251c\u2500\u2500 GET /stats                # System statistics\n    \u251c\u2500\u2500 GET /users                # User management\n    \u2514\u2500\u2500 GET /posts                # Post management\n</code></pre>"},{"location":"examples/router_patterns/#key-concepts","title":"Key Concepts","text":"<ol> <li>Router Creation: <code>Router()</code> creates a new router instance for organizing related routes</li> <li>Route Registration: Use <code>router.get()</code>, <code>router.post()</code>, etc. to register routes on specific routers</li> <li>Router Mounting: <code>app.mount(path, router)</code> mounts a router at a specific path prefix</li> <li>Nested Parameters: Paths like <code>/users/{user_id}/posts</code> allow parameter extraction at mount level</li> <li>Path Inheritance: Mount paths combine with route paths for final URL resolution</li> <li>Parameter Access: Parameters from mount paths are available in route handlers</li> </ol>"},{"location":"examples/router_patterns/#running-the-example","title":"Running the Example","text":"<pre><code># From the project root directory\ncd docs/examples/router_patterns\n\n# Run the application\npython app.py\n</code></pre> <p>The server will start at <code>http://127.0.0.1:8000</code> with detailed routing information displayed.</p>"},{"location":"examples/router_patterns/#testing-the-api","title":"Testing the API","text":""},{"location":"examples/router_patterns/#basic-endpoints","title":"Basic Endpoints","text":"<pre><code># API root - shows routing structure\ncurl http://127.0.0.1:8000/\n\n# Health check\ncurl http://127.0.0.1:8000/health\n</code></pre>"},{"location":"examples/router_patterns/#user-management","title":"User Management","text":"<pre><code># List all users\ncurl http://127.0.0.1:8000/api/v1/users\n\n# Get specific user\ncurl http://127.0.0.1:8000/api/v1/users/1\n\n# Create new user\ncurl -X POST http://127.0.0.1:8000/api/v1/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"newuser\", \"email\": \"newuser@example.com\"}'\n</code></pre>"},{"location":"examples/router_patterns/#user-posts-nested-routing","title":"User Posts (Nested Routing)","text":"<pre><code># Get posts for specific user\ncurl http://127.0.0.1:8000/api/v1/users/1/posts\n\n# Create post for specific user\ncurl -X POST http://127.0.0.1:8000/api/v1/users/1/posts \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"title\": \"My New Post\", \"content\": \"This is the content of my post.\"}'\n</code></pre>"},{"location":"examples/router_patterns/#posts-management","title":"Posts Management","text":"<pre><code># List all posts with author information\ncurl http://127.0.0.1:8000/api/v1/posts\n\n# Get specific post with comments\ncurl http://127.0.0.1:8000/api/v1/posts/1\n</code></pre>"},{"location":"examples/router_patterns/#post-comments-nested-routing","title":"Post Comments (Nested Routing)","text":"<pre><code># Get comments for specific post\ncurl http://127.0.0.1:8000/api/v1/posts/1/comments\n\n# Create comment on specific post\ncurl -X POST http://127.0.0.1:8000/api/v1/posts/1/comments \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"content\": \"Great post!\", \"user_id\": 2}'\n</code></pre>"},{"location":"examples/router_patterns/#admin-panel","title":"Admin Panel","text":"<pre><code># Admin dashboard\ncurl http://127.0.0.1:8000/admin\n\n# System statistics\ncurl http://127.0.0.1:8000/admin/stats\n\n# Admin user management\ncurl http://127.0.0.1:8000/admin/users\n\n# Admin post management\ncurl http://127.0.0.1:8000/admin/posts\n</code></pre>"},{"location":"examples/router_patterns/#router-pattern-benefits","title":"Router Pattern Benefits","text":""},{"location":"examples/router_patterns/#1-organization","title":"1. Organization","text":"<p>Related routes are grouped together in logical units, making the codebase easier to navigate and maintain.</p>"},{"location":"examples/router_patterns/#2-modularity","title":"2. Modularity","text":"<p>Routers can be developed independently and reused across different applications or API versions.</p>"},{"location":"examples/router_patterns/#3-nested-routing","title":"3. Nested Routing","text":"<p>Complex URL structures with parameters can be handled elegantly with proper parameter extraction.</p>"},{"location":"examples/router_patterns/#4-separation-of-concerns","title":"4. Separation of Concerns","text":"<p>Each router handles one specific domain (users, posts, admin), promoting clean architecture.</p>"},{"location":"examples/router_patterns/#5-scalability","title":"5. Scalability","text":"<p>Easy to add new route groups without modifying existing code structure.</p>"},{"location":"examples/router_patterns/#6-maintainability","title":"6. Maintainability","text":"<p>Clear structure makes large applications easier to understand and modify.</p>"},{"location":"examples/router_patterns/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"examples/router_patterns/#parameter-inheritance","title":"Parameter Inheritance","text":"<pre><code># Mount path parameters are available in subrouter handlers\napi_v1.mount(\"/users/{user_id}/posts\", user_posts_router)\n\n# Handler receives both mount and route parameters\nasync def get_user_posts(user_id: str):\n    # user_id comes from the mount path /users/{user_id}/posts\n    # Additional route parameters would also be available\n</code></pre>"},{"location":"examples/router_patterns/#multiple-router-levels","title":"Multiple Router Levels","text":"<pre><code># Create hierarchical router structure\nmain_router = Router()\napi_router = Router()\nv1_router = Router()\nusers_router = Router()\n\n# Build hierarchy\nusers_router.get(\"/\", list_users)\nv1_router.mount(\"/users\", users_router)\napi_router.mount(\"/v1\", v1_router)\nmain_router.mount(\"/api\", api_router)\n\n# Final paths: /api/v1/users/\n</code></pre>"},{"location":"examples/router_patterns/#middleware-integration","title":"Middleware Integration","text":"<pre><code># Router-specific middleware\nusers_router = Router()\nusers_router.get(\"/\", list_users, middleware=[auth_middleware])\n\n# All routes in this router will use the middleware\n</code></pre>"},{"location":"examples/router_patterns/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>CORS Middleware: Included for cross-origin API access</li> <li>In-Memory Storage: Uses simple Python data structures for demonstration</li> <li>Parameter Validation: Basic validation with error handling</li> <li>Structured Responses: Consistent JSON response format</li> <li>Error Handling: Proper HTTP status codes and error messages</li> </ul> <p>This example serves as a comprehensive reference for implementing complex routing patterns in Artanis applications, demonstrating best practices for API organization and scalability.</p>"},{"location":"getting-started/first-app/","title":"Your First App","text":"<p>Let's build a simple but feature-rich application to explore Artanis capabilities. We'll create a task management API that demonstrates routing, middleware, and data handling.</p>"},{"location":"getting-started/first-app/#what-well-build","title":"What We'll Build","text":"<p>Our task management API will have:</p> <ul> <li>\u2705 List all tasks - <code>GET /tasks</code></li> <li>\u2705 Get a specific task - <code>GET /tasks/{task_id}</code></li> <li>\u2705 Create a new task - <code>POST /tasks</code></li> <li>\u2705 Update a task - <code>PUT /tasks/{task_id}</code></li> <li>\u2705 Delete a task - <code>DELETE /tasks/{task_id}</code></li> <li>\u2705 Request logging middleware</li> <li>\u2705 CORS support</li> <li>\u2705 Error handling</li> </ul>"},{"location":"getting-started/first-app/#step-1-project-setup","title":"Step 1: Project Setup","text":"<p>Create a new directory and set up your environment:</p> <pre><code>mkdir task-api\ncd task-api\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install artanis uvicorn[standard]\n</code></pre>"},{"location":"getting-started/first-app/#step-2-create-the-basic-application","title":"Step 2: Create the Basic Application","text":"<p>Create <code>app.py</code>:</p> app.py<pre><code>from artanis import App\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, List, Any\n\n# Create the application\napp = App()\n\n# In-memory storage (in production, use a database)\ntasks: Dict[str, Dict[str, Any]] = {}\n\nasync def hello():\n    return {\n        \"message\": \"Welcome to Task API\",\n        \"version\": \"1.0.0\",\n        \"endpoints\": {\n            \"GET /tasks\": \"List all tasks\",\n            \"POST /tasks\": \"Create a new task\",\n            \"GET /tasks/{task_id}\": \"Get a specific task\",\n            \"PUT /tasks/{task_id}\": \"Update a task\",\n            \"DELETE /tasks/{task_id}\": \"Delete a task\"\n        }\n    }\n\napp.get(\"/\", hello)\n</code></pre> <p>Test it:</p> <pre><code>uvicorn app:app --reload\n</code></pre> <p>Visit http://127.0.0.1:8000 to see the welcome message.</p>"},{"location":"getting-started/first-app/#step-3-add-task-routes","title":"Step 3: Add Task Routes","text":"<p>Add the CRUD operations to <code>app.py</code>:</p> app.py<pre><code>from artanis import App\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, List, Any\n\napp = App()\n\n# In-memory storage\ntasks: Dict[str, Dict[str, Any]] = {}\n\nasync def hello():\n    return {\n        \"message\": \"Welcome to Task API\",\n        \"version\": \"1.0.0\",\n        \"endpoints\": {\n            \"GET /tasks\": \"List all tasks\",\n            \"POST /tasks\": \"Create a new task\",\n            \"GET /tasks/{task_id}\": \"Get a specific task\",\n            \"PUT /tasks/{task_id}\": \"Update a task\",\n            \"DELETE /tasks/{task_id}\": \"Delete a task\"\n        }\n    }\n\n# List all tasks\nasync def list_tasks():\n    return {\n        \"tasks\": list(tasks.values()),\n        \"count\": len(tasks)\n    }\n\n# Get a specific task\nasync def get_task(task_id: str):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n\n    return {\"task\": tasks[task_id]}\n\n# Create a new task\nasync def create_task(request):\n    data = await request.json()\n\n    # Validate required fields\n    if not data.get(\"title\"):\n        return {\"error\": \"Title is required\"}, 400\n\n    # Create the task\n    task_id = str(uuid.uuid4())\n    task = {\n        \"id\": task_id,\n        \"title\": data[\"title\"],\n        \"description\": data.get(\"description\", \"\"),\n        \"completed\": False,\n        \"created_at\": datetime.now().isoformat(),\n        \"updated_at\": datetime.now().isoformat()\n    }\n\n    tasks[task_id] = task\n    return {\"message\": \"Task created\", \"task\": task}, 201\n\n# Update a task\nasync def update_task(task_id: str, request):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n\n    data = await request.json()\n    task = tasks[task_id]\n\n    # Update fields\n    if \"title\" in data:\n        task[\"title\"] = data[\"title\"]\n    if \"description\" in data:\n        task[\"description\"] = data[\"description\"]\n    if \"completed\" in data:\n        task[\"completed\"] = data[\"completed\"]\n\n    task[\"updated_at\"] = datetime.now().isoformat()\n\n    return {\"message\": \"Task updated\", \"task\": task}\n\n# Delete a task\nasync def delete_task(task_id: str):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n\n    deleted_task = tasks.pop(task_id)\n    return {\"message\": \"Task deleted\", \"task\": deleted_task}\n\n# Register routes\napp.get(\"/\", hello)\napp.get(\"/tasks\", list_tasks)\napp.get(\"/tasks/{task_id}\", get_task)\napp.post(\"/tasks\", create_task)\napp.put(\"/tasks/{task_id}\", update_task)\napp.delete(\"/tasks/{task_id}\", delete_task)\n</code></pre>"},{"location":"getting-started/first-app/#step-4-add-middleware","title":"Step 4: Add Middleware","text":"<p>Add request logging and CORS support:</p> app.py<pre><code>from artanis import App\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, List, Any\nimport time\nimport logging\n\napp = App()\n\n# Request logging middleware\nasync def logging_middleware(request, response, next):\n    start_time = time.time()\n    method = request.scope.get(\"method\", \"UNKNOWN\")\n    path = request.scope.get(\"path\", \"/\")\n\n    print(f\"\u2192 {method} {path}\")\n\n    await next()\n\n    duration = time.time() - start_time\n    status = getattr(response, 'status', 200)\n    print(f\"\u2190 {method} {path} {status} ({duration:.3f}s)\")\n\n# CORS middleware\nasync def cors_middleware(request, response, next):\n    response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE, OPTIONS\"\n    response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type, Authorization\"\n    await next()\n\n# Register middleware\napp.use(logging_middleware)\napp.use(cors_middleware)\n\n# In-memory storage\ntasks: Dict[str, Dict[str, Any]] = {}\n\n# ... rest of the code remains the same\n</code></pre>"},{"location":"getting-started/first-app/#step-5-test-your-api","title":"Step 5: Test Your API","text":"<p>Restart your server and test the endpoints:</p>"},{"location":"getting-started/first-app/#create-a-task","title":"Create a Task","text":"<pre><code>curl -X POST http://127.0.0.1:8000/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"title\": \"Learn Artanis\",\n    \"description\": \"Complete the Artanis tutorial\"\n  }'\n</code></pre> <p>Response: <pre><code>{\n  \"message\": \"Task created\",\n  \"task\": {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"title\": \"Learn Artanis\",\n    \"description\": \"Complete the Artanis tutorial\",\n    \"completed\": false,\n    \"created_at\": \"2024-01-15T10:30:45.123456\",\n    \"updated_at\": \"2024-01-15T10:30:45.123456\"\n  }\n}\n</code></pre></p>"},{"location":"getting-started/first-app/#list-all-tasks","title":"List All Tasks","text":"<pre><code>curl http://127.0.0.1:8000/tasks\n</code></pre>"},{"location":"getting-started/first-app/#get-specific-task","title":"Get Specific Task","text":"<pre><code>curl http://127.0.0.1:8000/tasks/123e4567-e89b-12d3-a456-426614174000\n</code></pre>"},{"location":"getting-started/first-app/#update-a-task","title":"Update a Task","text":"<pre><code>curl -X PUT http://127.0.0.1:8000/tasks/123e4567-e89b-12d3-a456-426614174000 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"completed\": true\n  }'\n</code></pre>"},{"location":"getting-started/first-app/#delete-a-task","title":"Delete a Task","text":"<pre><code>curl -X DELETE http://127.0.0.1:8000/tasks/123e4567-e89b-12d3-a456-426614174000\n</code></pre>"},{"location":"getting-started/first-app/#step-6-add-error-handling","title":"Step 6: Add Error Handling","text":"<p>Improve error handling throughout the application:</p> app.py<pre><code>from artanis import App\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, List, Any\nimport time\nimport json\n\napp = App()\n\n# Request logging middleware\nasync def logging_middleware(request, response, next):\n    start_time = time.time()\n    method = request.scope.get(\"method\", \"UNKNOWN\")\n    path = request.scope.get(\"path\", \"/\")\n\n    print(f\"\u2192 {method} {path}\")\n\n    await next()\n\n    duration = time.time() - start_time\n    status = getattr(response, 'status', 200)\n    print(f\"\u2190 {method} {path} {status} ({duration:.3f}s)\")\n\n# CORS middleware\nasync def cors_middleware(request, response, next):\n    response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE, OPTIONS\"\n    response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type, Authorization\"\n    await next()\n\n# Error handling middleware\nasync def error_handling_middleware(request, response, next):\n    try:\n        await next()\n    except json.JSONDecodeError:\n        response.status = 400\n        response.body = {\"error\": \"Invalid JSON in request body\"}\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        response.status = 500\n        response.body = {\"error\": \"Internal server error\"}\n\n# Register middleware\napp.use(error_handling_middleware)\napp.use(logging_middleware)\napp.use(cors_middleware)\n\n# In-memory storage\ntasks: Dict[str, Dict[str, Any]] = {}\n\n# ... rest of the routes remain the same\n</code></pre>"},{"location":"getting-started/first-app/#step-7-add-input-validation","title":"Step 7: Add Input Validation","text":"<p>Create a helper function for validating task data:</p> app.py<pre><code>from artanis import App\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Tuple, Optional\nimport time\nimport json\n\napp = App()\n\n# ... middleware code remains the same ...\n\n# In-memory storage\ntasks: Dict[str, Dict[str, Any]] = {}\n\ndef validate_task_data(data: dict) -&gt; Tuple[bool, Optional[str]]:\n    \"\"\"Validate task data and return (is_valid, error_message)\"\"\"\n    if not isinstance(data, dict):\n        return False, \"Request body must be a JSON object\"\n\n    # Check title\n    title = data.get(\"title\", \"\").strip()\n    if not title:\n        return False, \"Title is required and cannot be empty\"\n    if len(title) &gt; 200:\n        return False, \"Title must be 200 characters or less\"\n\n    # Check description\n    description = data.get(\"description\", \"\")\n    if description and len(description) &gt; 1000:\n        return False, \"Description must be 1000 characters or less\"\n\n    return True, None\n\nasync def hello():\n    return {\n        \"message\": \"Welcome to Task API\",\n        \"version\": \"1.0.0\",\n        \"endpoints\": {\n            \"GET /tasks\": \"List all tasks\",\n            \"POST /tasks\": \"Create a new task\",\n            \"GET /tasks/{task_id}\": \"Get a specific task\",\n            \"PUT /tasks/{task_id}\": \"Update a task\",\n            \"DELETE /tasks/{task_id}\": \"Delete a task\"\n        }\n    }\n\nasync def list_tasks():\n    return {\n        \"tasks\": list(tasks.values()),\n        \"count\": len(tasks)\n    }\n\nasync def get_task(task_id: str):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n    return {\"task\": tasks[task_id]}\n\nasync def create_task(request):\n    data = await request.json()\n\n    # Validate input\n    is_valid, error_message = validate_task_data(data)\n    if not is_valid:\n        return {\"error\": error_message}, 400\n\n    # Create the task\n    task_id = str(uuid.uuid4())\n    task = {\n        \"id\": task_id,\n        \"title\": data[\"title\"].strip(),\n        \"description\": data.get(\"description\", \"\").strip(),\n        \"completed\": False,\n        \"created_at\": datetime.now().isoformat(),\n        \"updated_at\": datetime.now().isoformat()\n    }\n\n    tasks[task_id] = task\n    return {\"message\": \"Task created\", \"task\": task}, 201\n\nasync def update_task(task_id: str, request):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n\n    data = await request.json()\n\n    # Validate if title is being updated\n    if \"title\" in data:\n        temp_data = {\"title\": data[\"title\"]}\n        is_valid, error_message = validate_task_data(temp_data)\n        if not is_valid:\n            return {\"error\": error_message}, 400\n\n    task = tasks[task_id]\n\n    # Update fields\n    if \"title\" in data:\n        task[\"title\"] = data[\"title\"].strip()\n    if \"description\" in data:\n        task[\"description\"] = data[\"description\"].strip()\n    if \"completed\" in data:\n        task[\"completed\"] = bool(data[\"completed\"])\n\n    task[\"updated_at\"] = datetime.now().isoformat()\n\n    return {\"message\": \"Task updated\", \"task\": task}\n\nasync def delete_task(task_id: str):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n\n    deleted_task = tasks.pop(task_id)\n    return {\"message\": \"Task deleted\", \"task\": deleted_task}\n\n# Register routes\napp.get(\"/\", hello)\napp.get(\"/tasks\", list_tasks)\napp.get(\"/tasks/{task_id}\", get_task)\napp.post(\"/tasks\", create_task)\napp.put(\"/tasks/{task_id}\", update_task)\napp.delete(\"/tasks/{task_id}\", delete_task)\n</code></pre>"},{"location":"getting-started/first-app/#complete-application","title":"Complete Application","text":"<p>Here's your complete first Artanis application:</p> app.py<pre><code>from artanis import App\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Tuple, Optional\nimport time\nimport json\n\napp = App()\n\n# Error handling middleware\nasync def error_handling_middleware(request, response, next):\n    try:\n        await next()\n    except json.JSONDecodeError:\n        response.status = 400\n        response.body = {\"error\": \"Invalid JSON in request body\"}\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        response.status = 500\n        response.body = {\"error\": \"Internal server error\"}\n\n# Request logging middleware\nasync def logging_middleware(request, response, next):\n    start_time = time.time()\n    method = request.scope.get(\"method\", \"UNKNOWN\")\n    path = request.scope.get(\"path\", \"/\")\n\n    print(f\"\u2192 {method} {path}\")\n\n    await next()\n\n    duration = time.time() - start_time\n    status = getattr(response, 'status', 200)\n    print(f\"\u2190 {method} {path} {status} ({duration:.3f}s)\")\n\n# CORS middleware\nasync def cors_middleware(request, response, next):\n    response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE, OPTIONS\"\n    response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type, Authorization\"\n    await next()\n\n# Register middleware\napp.use(error_handling_middleware)\napp.use(logging_middleware)\napp.use(cors_middleware)\n\n# In-memory storage\ntasks: Dict[str, Dict[str, Any]] = {}\n\ndef validate_task_data(data: dict) -&gt; Tuple[bool, Optional[str]]:\n    \"\"\"Validate task data and return (is_valid, error_message)\"\"\"\n    if not isinstance(data, dict):\n        return False, \"Request body must be a JSON object\"\n\n    title = data.get(\"title\", \"\").strip()\n    if not title:\n        return False, \"Title is required and cannot be empty\"\n    if len(title) &gt; 200:\n        return False, \"Title must be 200 characters or less\"\n\n    description = data.get(\"description\", \"\")\n    if description and len(description) &gt; 1000:\n        return False, \"Description must be 1000 characters or less\"\n\n    return True, None\n\n# Route handlers\nasync def hello():\n    return {\n        \"message\": \"Welcome to Task API\",\n        \"version\": \"1.0.0\",\n        \"endpoints\": {\n            \"GET /tasks\": \"List all tasks\",\n            \"POST /tasks\": \"Create a new task\",\n            \"GET /tasks/{task_id}\": \"Get a specific task\",\n            \"PUT /tasks/{task_id}\": \"Update a task\",\n            \"DELETE /tasks/{task_id}\": \"Delete a task\"\n        }\n    }\n\nasync def list_tasks():\n    return {\n        \"tasks\": list(tasks.values()),\n        \"count\": len(tasks)\n    }\n\nasync def get_task(task_id: str):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n    return {\"task\": tasks[task_id]}\n\nasync def create_task(request):\n    data = await request.json()\n\n    is_valid, error_message = validate_task_data(data)\n    if not is_valid:\n        return {\"error\": error_message}, 400\n\n    task_id = str(uuid.uuid4())\n    task = {\n        \"id\": task_id,\n        \"title\": data[\"title\"].strip(),\n        \"description\": data.get(\"description\", \"\").strip(),\n        \"completed\": False,\n        \"created_at\": datetime.now().isoformat(),\n        \"updated_at\": datetime.now().isoformat()\n    }\n\n    tasks[task_id] = task\n    return {\"message\": \"Task created\", \"task\": task}, 201\n\nasync def update_task(task_id: str, request):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n\n    data = await request.json()\n\n    if \"title\" in data:\n        temp_data = {\"title\": data[\"title\"]}\n        is_valid, error_message = validate_task_data(temp_data)\n        if not is_valid:\n            return {\"error\": error_message}, 400\n\n    task = tasks[task_id]\n\n    if \"title\" in data:\n        task[\"title\"] = data[\"title\"].strip()\n    if \"description\" in data:\n        task[\"description\"] = data[\"description\"].strip()\n    if \"completed\" in data:\n        task[\"completed\"] = bool(data[\"completed\"])\n\n    task[\"updated_at\"] = datetime.now().isoformat()\n\n    return {\"message\": \"Task updated\", \"task\": task}\n\nasync def delete_task(task_id: str):\n    if task_id not in tasks:\n        return {\"error\": \"Task not found\"}, 404\n\n    deleted_task = tasks.pop(task_id)\n    return {\"message\": \"Task deleted\", \"task\": deleted_task}\n\n# Register routes\napp.get(\"/\", hello)\napp.get(\"/tasks\", list_tasks)\napp.get(\"/tasks/{task_id}\", get_task)\napp.post(\"/tasks\", create_task)\napp.put(\"/tasks/{task_id}\", update_task)\napp.delete(\"/tasks/{task_id}\", delete_task)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000, reload=True)\n</code></pre>"},{"location":"getting-started/first-app/#what-youve-learned","title":"What You've Learned","text":"<p>Congratulations! You've built a complete REST API that demonstrates:</p> <ul> <li>\u2705 Route registration with different HTTP methods</li> <li>\u2705 Path parameters for dynamic URLs</li> <li>\u2705 Request body handling with JSON data</li> <li>\u2705 Middleware for cross-cutting concerns</li> <li>\u2705 Error handling with proper HTTP status codes</li> <li>\u2705 Input validation for data integrity</li> <li>\u2705 CORS support for browser compatibility</li> </ul>"},{"location":"getting-started/first-app/#next-steps","title":"Next Steps","text":"<p>Now you're ready to explore more advanced features:</p> <ul> <li>Learn about advanced routing - Subrouting and complex patterns</li> <li>Master middleware - Custom middleware and security</li> <li>Explore examples - See more complex applications</li> <li>Follow the tutorial - Build a complete blog API with database integration</li> </ul> <p>Your Artanis journey has just begun! \ud83d\ude80</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will walk you through installing Artanis and setting up your development environment.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Before installing Artanis, ensure you have:</p> <ul> <li>Python 3.8+ - Artanis supports Python 3.8, 3.9, 3.10, 3.11, and 3.13</li> <li>pip - Python package manager (usually comes with Python)</li> <li>venv (recommended) - For creating isolated Python environments</li> </ul> <p>Check Your Python Version</p> <pre><code>python --version\n# or\npython3 --version\n</code></pre>"},{"location":"getting-started/installation/#install-from-pypi","title":"Install from PyPI","text":"<p>The easiest way to install Artanis is using pip:</p> <pre><code>pip install artanis\n</code></pre> <p>This installs the latest stable version of Artanis with zero runtime dependencies.</p>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute to Artanis or need the latest development features:</p>"},{"location":"getting-started/installation/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/nordxai/Artanis\ncd Artanis\n</code></pre>"},{"location":"getting-started/installation/#create-virtual-environment","title":"Create Virtual Environment","text":"Linux/macOSWindows <pre><code>python -m venv venv\nsource venv/bin/activate\n</code></pre> <pre><code>python -m venv venv\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"getting-started/installation/#install-in-development-mode","title":"Install in Development Mode","text":"<pre><code># Install with all development dependencies\npip install -e \".[dev]\"\n\n# Or install specific dependency groups\npip install -e \".[test]\"     # Testing dependencies only\npip install -e \".[all]\"      # All optional dependencies\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Create a simple test to verify Artanis is installed correctly:</p> test_install.py<pre><code>from artanis import App\nimport artanis\n\nprint(f\"Artanis version: {artanis.__version__}\")\n\napp = App()\n\nasync def hello():\n    return {\"message\": \"Artanis is working!\"}\n\napp.get(\"/\", hello)\n\nprint(\"\u2705 Artanis installed successfully!\")\n</code></pre> <p>Run the test:</p> <pre><code>python test_install.py\n</code></pre> <p>You should see output like: <pre><code>Artanis version: 0.1.1\n\u2705 Artanis installed successfully!\n</code></pre></p>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Artanis has zero runtime dependencies, but you may want to install additional packages for development:</p>"},{"location":"getting-started/installation/#asgi-server-required-for-running-apps","title":"ASGI Server (Required for Running Apps)","text":"<pre><code># Uvicorn (recommended)\npip install uvicorn[standard]\n\n# Or Hypercorn\npip install hypercorn\n</code></pre>"},{"location":"getting-started/installation/#development-tools","title":"Development Tools","text":"<pre><code># Code quality tools (included in [dev] group)\npip install ruff mypy pre-commit\n\n# Testing tools (included in [test] group)\npip install pytest pytest-asyncio pytest-cov\n\n# Documentation tools\npip install mkdocs mkdocs-material mkdocstrings[python]\n</code></pre>"},{"location":"getting-started/installation/#database-drivers-for-tutorials-and-examples","title":"Database Drivers (for tutorials and examples)","text":"<pre><code># For SQLite (built into Python)\n# No additional installation needed\n\n# For PostgreSQL\npip install asyncpg\n\n# For MySQL\npip install aiomysql\n</code></pre>"},{"location":"getting-started/installation/#available-dependency-groups","title":"Available Dependency Groups","text":"<p>When installing in development mode, you can use these dependency groups:</p> Group Description Installation <code>dev</code> Development tools (ruff, mypy, pre-commit, pytest) <code>pip install -e \".[dev]\"</code> <code>test</code> Testing and coverage tools <code>pip install -e \".[test]\"</code> <code>all</code> All optional dependencies <code>pip install -e \".[all]\"</code>"},{"location":"getting-started/installation/#installation-troubleshooting","title":"Installation Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Python Version</p> <p>Make sure you're using Python 3.8 or higher: <pre><code>python --version\n</code></pre> If you see Python 2.x, try using <code>python3</code> instead of <code>python</code>.</p> <p>Virtual Environment</p> <p>Always use a virtual environment to avoid dependency conflicts: <pre><code>python -m venv myproject-env\nsource myproject-env/bin/activate  # Linux/macOS\n# or\nmyproject-env\\Scripts\\activate     # Windows\n</code></pre></p> <p>Permission Errors</p> <p>If you get permission errors, avoid using <code>sudo</code>. Instead: - Use a virtual environment (recommended) - Use the <code>--user</code> flag: <code>pip install --user artanis</code></p>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":"Ubuntu/DebianCentOS/RHELmacOSWindows <pre><code># Install Python 3.8+ if needed\nsudo apt update\nsudo apt install python3.8 python3.8-venv python3.8-pip\n\n# Create virtual environment\npython3.8 -m venv venv\nsource venv/bin/activate\npip install artanis\n</code></pre> <pre><code># Install Python 3.8+ if needed\nsudo yum install python38 python38-pip\n\n# Create virtual environment\npython3.8 -m venv venv\nsource venv/bin/activate\npip install artanis\n</code></pre> <pre><code># Using Homebrew (recommended)\nbrew install python@3.8\n\n# Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate\npip install artanis\n</code></pre> <ol> <li>Download Python from python.org</li> <li>Make sure to check \"Add Python to PATH\" during installation</li> <li>Open Command Prompt or PowerShell: <pre><code>python -m venv venv\nvenv\\Scripts\\activate\npip install artanis\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Artanis installed, you're ready to:</p> <ol> <li>Create your first application - Build a simple \"Hello World\" app</li> <li>Follow the tutorial - Build a complete blog API step-by-step</li> <li>Explore examples - See working code for common patterns</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during installation:</p> <ol> <li>Check the GitHub Issues for common problems</li> <li>Search existing issues on GitHub</li> <li>Create a new issue with:</li> <li>Your operating system and version</li> <li>Python version (<code>python --version</code>)</li> <li>Full error message</li> <li>Steps to reproduce the problem</li> </ol>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get up and running with Artanis in just a few minutes! This guide will show you how to create your first application.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have:</p> <ul> <li>Python 3.8+ installed</li> <li>Artanis installed (<code>pip install artanis</code>)</li> <li>An ASGI server like Uvicorn (<code>pip install uvicorn[standard]</code>)</li> </ul>"},{"location":"getting-started/quickstart/#your-first-application","title":"Your First Application","text":""},{"location":"getting-started/quickstart/#1-create-the-application-file","title":"1. Create the Application File","text":"<p>Create a new file called <code>main.py</code>:</p> main.py<pre><code>from artanis import App\n\n# Create the application\napp = App()\n\n# Define a simple route\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n\n# Register the route\napp.get(\"/\", hello)\n</code></pre>"},{"location":"getting-started/quickstart/#2-run-the-application","title":"2. Run the Application","text":"<p>Start the development server:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>You should see output like:</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [12345] using StatReload\nINFO:     Started server process [12346]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre>"},{"location":"getting-started/quickstart/#3-test-your-application","title":"3. Test Your Application","text":"<p>Open your browser and visit http://127.0.0.1:8000</p> <p>You should see:</p> <pre><code>{\"message\": \"Hello, World!\"}\n</code></pre> <p>\ud83c\udf89 Congratulations! You've created your first Artanis application!</p>"},{"location":"getting-started/quickstart/#adding-more-routes","title":"Adding More Routes","text":"<p>Let's expand our application with more functionality:</p> main.py<pre><code>from artanis import App\n\napp = App()\n\n# Home route\nasync def home():\n    return {\"message\": \"Welcome to Artanis!\"}\n\n# Route with path parameter\nasync def greet_user(name):\n    return {\"message\": f\"Hello, {name}!\"}\n\n# Route that handles request data\nasync def create_item(request):\n    data = await request.json()\n    return {\n        \"message\": \"Item created\",\n        \"item\": data\n    }\n\n# Register routes\napp.get(\"/\", home)\napp.get(\"/hello/{name}\", greet_user)\napp.post(\"/items\", create_item)\n</code></pre> <p>Now restart your server and test these endpoints:</p> GET /GET /hello/{name}POST /items <p><pre><code>curl http://127.0.0.1:8000/\n</code></pre> <pre><code>{\"message\": \"Welcome to Artanis!\"}\n</code></pre></p> <p><pre><code>curl http://127.0.0.1:8000/hello/Alice\n</code></pre> <pre><code>{\"message\": \"Hello, Alice!\"}\n</code></pre></p> <p><pre><code>curl -X POST http://127.0.0.1:8000/items \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\": \"My Item\", \"price\": 29.99}'\n</code></pre> <pre><code>{\n  \"message\": \"Item created\",\n  \"item\": {\"name\": \"My Item\", \"price\": 29.99}\n}\n</code></pre></p>"},{"location":"getting-started/quickstart/#adding-middleware","title":"Adding Middleware","text":"<p>Middleware allows you to add functionality that runs before or after your route handlers. Here's how to add CORS support:</p> main.py<pre><code>from artanis import App\n\napp = App()\n\n# CORS middleware\nasync def cors_middleware(request, response, next):\n    # Add CORS headers\n    response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE\"\n    response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type, Authorization\"\n\n    # Continue to the next middleware or route handler\n    await next()\n\n# Register middleware globally\napp.use(cors_middleware)\n\n# Your routes here...\nasync def hello():\n    return {\"message\": \"Hello with CORS!\"}\n\napp.get(\"/\", hello)\n</code></pre>"},{"location":"getting-started/quickstart/#project-structure","title":"Project Structure","text":"<p>As your application grows, organize it like this:</p> <pre><code>my-artanis-app/\n\u251c\u2500\u2500 main.py              # Application entry point\n\u251c\u2500\u2500 routes/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 users.py         # User-related routes\n\u2502   \u2514\u2500\u2500 items.py         # Item-related routes\n\u251c\u2500\u2500 middleware/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 auth.py          # Authentication middleware\n\u2502   \u2514\u2500\u2500 logging.py       # Logging middleware\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 database.py      # Database models\n\u2514\u2500\u2500 requirements.txt     # Dependencies\n</code></pre>"},{"location":"getting-started/quickstart/#using-the-cli","title":"Using the CLI","text":"<p>Artanis provides a CLI tool to generate new projects:</p> <pre><code># Create a new project\nartanis new my-project\n\n# Navigate to the project\ncd my-project\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run the application\npython app.py\n</code></pre> <p>The CLI creates a basic project structure with:</p> <ul> <li><code>app.py</code> - Main application file</li> <li><code>requirements.txt</code> - Dependencies</li> <li><code>README.md</code> - Project documentation</li> </ul>"},{"location":"getting-started/quickstart/#development-tips","title":"Development Tips","text":""},{"location":"getting-started/quickstart/#1-enable-debug-mode","title":"1. Enable Debug Mode","text":"<p>For development, run with auto-reload:</p> <pre><code>uvicorn main:app --reload --log-level debug\n</code></pre>"},{"location":"getting-started/quickstart/#2-environment-variables","title":"2. Environment Variables","text":"<p>Use environment variables for configuration:</p> <pre><code>import os\n\napp = App()\n\n# Configure based on environment\nDEBUG = os.getenv('DEBUG', 'false').lower() == 'true'\nPORT = int(os.getenv('PORT', 8000))\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=PORT, reload=DEBUG)\n</code></pre>"},{"location":"getting-started/quickstart/#3-type-hints","title":"3. Type Hints","text":"<p>Use type hints for better IDE support:</p> <pre><code>from typing import Dict, Any\nfrom artanis import App, Request\n\napp = App()\n\nasync def typed_handler(user_id: str) -&gt; Dict[str, Any]:\n    return {\"user_id\": user_id, \"type\": \"user\"}\n\nasync def json_handler(request: Request) -&gt; Dict[str, str]:\n    data: Dict[str, Any] = await request.json()\n    return {\"received\": str(data)}\n\napp.get(\"/users/{user_id}\", typed_handler)\napp.post(\"/data\", json_handler)\n</code></pre>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#error-handling","title":"Error Handling","text":"<pre><code>from artanis import App\nfrom artanis.exceptions import ValidationError\n\napp = App()\n\nasync def create_user(request):\n    data = await request.json()\n\n    # Validate required fields\n    if not data.get('email'):\n        raise ValidationError(\"Email is required\")\n\n    return {\"message\": \"User created\", \"email\": data['email']}\n\napp.post(\"/users\", create_user)\n</code></pre>"},{"location":"getting-started/quickstart/#path-based-middleware","title":"Path-based Middleware","text":"<pre><code># Authentication middleware for admin routes only\nasync def auth_middleware(request, response, next):\n    token = request.headers.get('Authorization')\n    if not token:\n        response.status = 401\n        response.body = {\"error\": \"Authentication required\"}\n        return\n\n    await next()\n\n# Apply only to /admin/* routes\napp.use(\"/admin\", auth_middleware)\n\nasync def admin_dashboard():\n    return {\"message\": \"Welcome to admin dashboard\"}\n\napp.get(\"/admin/dashboard\", admin_dashboard)\n</code></pre>"},{"location":"getting-started/quickstart/#multiple-http-methods","title":"Multiple HTTP Methods","text":"<pre><code># Handle both GET and POST on the same path\nasync def get_items():\n    return {\"items\": [\"item1\", \"item2\"]}\n\nasync def create_item(request):\n    data = await request.json()\n    return {\"created\": data}\n\napp.get(\"/items\", get_items)\napp.post(\"/items\", create_item)\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you have a working Artanis application, explore these topics:</p> <ul> <li> <p>:material-school:{ .lg .middle } Learn More</p> <p>Follow our comprehensive tutorial to build a complete blog API</p> <p>:octicons-arrow-right-24: Tutorial</p> </li> <li> <p>:material-book:{ .lg .middle } User Guide</p> <p>Deep dive into routing, middleware, security, and more</p> <p>:octicons-arrow-right-24: User Guide</p> </li> <li> <p>:material-code-braces:{ .lg .middle } Examples</p> <p>See working examples for common patterns and use cases</p> <p>:octicons-arrow-right-24: Examples</p> </li> <li> <p>:material-rocket-launch:{ .lg .middle } Deployment</p> <p>Learn how to deploy your application to production</p> <p>:octicons-arrow-right-24: Deployment</p> </li> </ul>"},{"location":"getting-started/quickstart/#get-help","title":"Get Help","text":"<ul> <li>Documentation: You're reading it! \ud83d\udcd6</li> <li>GitHub Issues: Report bugs or ask questions</li> <li>Discussions: Community discussions</li> <li>Examples: Check the <code>/examples</code> directory in the repository</li> </ul>"},{"location":"tutorial/","title":"Artanis Tutorial: Building a Simple Blog API","text":"<p>Welcome to the Artanis tutorial! In this guide, we'll build a simple but complete Blog API from scratch. We'll cover the following topics:</p> <ul> <li>Project setup</li> <li>Creating a basic application</li> <li>Defining routes</li> <li>Using middleware for logging and error handling</li> <li>Connecting to a database</li> <li>Creating, reading, updating, and deleting posts</li> <li>Validating request data</li> <li>Organizing your code with routers</li> </ul> <p>By the end of this tutorial, you'll have a solid understanding of how to build modern web applications with Artanis.</p>"},{"location":"tutorial/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed:</p> <ul> <li>Python 3.8+</li> <li><code>pip</code> and <code>venv</code></li> </ul>"},{"location":"tutorial/#lets-get-started","title":"Let's Get Started!","text":"<p>Ready to build? Let's dive in!</p>"},{"location":"tutorial/01-project-setup/","title":"1. Project Setup","text":"<p>First, let's create a new directory for our project and set up a virtual environment.</p> <pre><code>mkdir artanis-blog-api\ncd artanis-blog-api\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> <p>Next, we'll install Artanis and Uvicorn:</p> <pre><code>pip install artanis uvicorn\n</code></pre> <p>Now, create a new file called <code>main.py</code> and add the following code:</p> <pre><code># main.py\nfrom artanis import App\nimport uvicorn\n\napp = App()\n\nasync def root():\n    return {\"message\": \"Welcome to the Blog API!\"}\n\napp.get(\"/\", root)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre> <p>This is the most basic Artanis application. Let's break it down:</p> <ol> <li>We import the <code>App</code> class from <code>artanis</code>.</li> <li>We create an instance of the <code>App</code> class.</li> <li>We define a handler function <code>root</code>.</li> <li>We register the <code>root</code> handler for GET requests to the <code>/</code> path using <code>app.get()</code>.</li> <li>We use <code>uvicorn</code> to run the application.</li> </ol> <p>To run the application, use the following command:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Now, if you open your browser to <code>http://127.0.0.1:8000</code>, you should see the message <code>{\"message\":\"Welcome to the Blog API!\"}</code>.</p> <p>In the next section, we'll add more routes to our API.</p>"},{"location":"tutorial/02-creating-routes/","title":"2. Creating Routes","text":"<p>In this section, we'll add routes for our blog posts. We'll need routes to:</p> <ul> <li>Get all posts</li> <li>Create a new post</li> <li>Get a single post</li> <li>Update a post</li> <li>Delete a post</li> </ul> <p>For now, we'll use in-memory data. We'll connect to a real database in a later section.</p> <p>Update your <code>main.py</code> file with the following code:</p> <pre><code># main.py\nfrom artanis import App\nfrom artanis.exceptions import RouteNotFound\nimport uvicorn\n\napp = App()\n\n# In-memory database\nposts = {\n    1: {\"title\": \"First Post\", \"content\": \"This is the first post.\"},\n    2: {\"title\": \"Second Post\", \"content\": \"This is the second post.\"},\n}\n\nasync def root():\n    return {\"message\": \"Welcome to the Blog API!\"}\n\nasync def get_posts():\n    return posts\n\nasync def create_post(request):\n    post_data = await request.json()\n    post_id = max(posts.keys()) + 1\n    posts[post_id] = post_data\n    return {\"message\": \"Post created\", \"post_id\": post_id}\n\nasync def get_post(post_id: int):\n    post_id = int(post_id)\n    if post_id not in posts:\n        raise RouteNotFound(f\"Post with ID {post_id} not found\")\n    return posts[post_id]\n\nasync def update_post(post_id: int, request):\n    post_id = int(post_id)\n    if post_id not in posts:\n        raise RouteNotFound(f\"Post with ID {post_id} not found\")\n    post_data = await request.json()\n    posts[post_id] = post_data\n    return {\"message\": f\"Post {post_id} updated\"}\n\nasync def delete_post(post_id: int):\n    post_id = int(post_id)\n    if post_id not in posts:\n        raise RouteNotFound(f\"Post with ID {post_id} not found\")\n    del posts[post_id]\n    return {\"message\": f\"Post {post_id} deleted\"}\n\napp.get(\"/\", root)\napp.get(\"/posts\", get_posts)\napp.post(\"/posts\", create_post)\napp.get(\"/post/{post_id}\", get_post)\napp.put(\"/post/{post_id}\", update_post)\napp.delete(\"/post/{post_id}\", delete_post)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre> <p>Now you can try out the new routes using a tool like <code>curl</code> or an API client like Postman.</p> <p>In the next section, we'll learn how to use middleware for logging and error handling.</p>"},{"location":"tutorial/03-middleware/","title":"3. Middleware","text":"<p>Middleware functions are a powerful feature of Artanis. They can be used to perform actions before or after a request is handled. In this section, we'll add middleware for logging and error handling.</p>"},{"location":"tutorial/03-middleware/#logging-middleware","title":"Logging Middleware","text":"<p>Artanis has a built-in logging system, but let's create our own simple logging middleware to see how it works.</p> <p>Update your <code>main.py</code> file:</p> <pre><code># main.py\nimport time\nfrom artanis import App\nfrom artanis.exceptions import RouteNotFound\nimport uvicorn\n\napp = App()\n\n# In-memory database\nposts = {\n    1: {\"title\": \"First Post\", \"content\": \"This is the first post.\"},\n    2: {\"title\": \"Second Post\", \"content\": \"This is the second post.\"},\n}\n\n# Logging middleware\nasync def logging_middleware(request, response, next):\n    start_time = time.time()\n    await next()\n    process_time = (time.time() - start_time) * 1000\n    print(f\"Request to {request.scope['path']} processed in {process_time:.2f}ms\")\n\napp.use(logging_middleware)\n\n# ... (route handlers)\n\napp.get(\"/\", root)\napp.get(\"/posts\", get_posts)\n# ... (rest of the routes)\n</code></pre> <p>Now, every time you make a request to the API, you'll see a log message in your console.</p>"},{"location":"tutorial/03-middleware/#error-handling-middleware","title":"Error Handling Middleware","text":"<p>Artanis has a built-in exception handling system, but you can also create your own error handling middleware. Let's create a middleware that catches <code>RouteNotFound</code> exceptions and returns a custom error message.</p> <p>Update your <code>main.py</code> file:</p> <pre><code># main.py\nimport time\nfrom artanis import App\nfrom artanis.exceptions import RouteNotFound\nfrom artanis.middleware.exception import ExceptionHandlerMiddleware\nimport uvicorn\n\napp = App()\n\n# In-memory database\nposts = {\n    1: {\"title\": \"First Post\", \"content\": \"This is the first post.\"},\n    2: {\"title\": \"Second Post\", \"content\": \"This is the second post.\"},\n}\n\n# Logging middleware\nasync def logging_middleware(request, response, next):\n    start_time = time.time()\n    await next()\n    process_time = (time.time() - start_time) * 1000\n    print(f\"Request to {request.scope['path']} processed in {process_time:.2f}ms\")\n\napp.use(logging_middleware)\n\n# Error handling middleware\ndef handle_route_not_found(exc, request, response):\n    response.set_status(404)\n    response.json({\"error\": str(exc)})\n    return response\n\nexception_handler = ExceptionHandlerMiddleware()\nexception_handler.add_handler(RouteNotFound, handle_route_not_found)\napp.use(exception_handler)\n\n# ... (route handlers and routes)\n</code></pre> <p>Now, if you try to access a post that doesn't exist (e.g., <code>/posts/99</code>), you'll get a custom 404 error message.</p> <p>In the next section, we'll connect our application to a real database.</p>"},{"location":"tutorial/04-database-integration/","title":"4. Database Integration","text":"<p>In this section, we'll replace our in-memory database with a real SQLite database. We'll use the built-in <code>sqlite3</code> library for simplicity.</p> <p>Note: SQLite operations in Python are synchronous by default. For production applications with high concurrency, consider using <code>aiosqlite</code> for true async database operations.</p> <p>First, let's add the database functions directly to our <code>main.py</code> file:</p> <pre><code># Add these database functions to main.py\nimport sqlite3\n\n# Shared in-memory database connection\n_db_connection = None\n\ndef get_db_connection():\n    global _db_connection\n    if _db_connection is None:\n        _db_connection = sqlite3.connect(\":memory:\", check_same_thread=False)\n    return _db_connection\n\ndef create_tables():\n    with get_db_connection() as db:\n        db.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS posts (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                title TEXT NOT NULL,\n                content TEXT NOT NULL\n            )\n        \"\"\")\n        db.commit()\n</code></pre> <p>Now, update your <code>main.py</code> file to use the database:</p> <pre><code># main.py\nimport time\nfrom artanis import App\nfrom artanis.exceptions import RouteNotFound\nfrom artanis.middleware.exception import ExceptionHandlerMiddleware\nfrom database import get_db_connection, create_tables\nimport uvicorn\n\napp = App()\n\n# Initialize database tables\ncreate_tables()\n\n# ... (middleware)\n\nasync def get_posts():\n    with get_db_connection() as db:\n        cursor = db.execute(\"SELECT id, title, content FROM posts\")\n        rows = cursor.fetchall()\n        return [{\"id\": row[0], \"title\": row[1], \"content\": row[2]} for row in rows]\n\nasync def create_post(request):\n    post_data = await request.json()\n    with get_db_connection() as db:\n        cursor = db.execute(\n            \"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            (post_data[\"title\"], post_data[\"content\"])\n        )\n        db.commit()\n        return {\"message\": \"Post created\", \"post_id\": cursor.lastrowid}\n\n# ... (update get_post, update_post, delete_post to use the database)\n\n# ... (add routes)\n\n# ... (rest of the file)\n</code></pre> <p>Now, your application is using a real database to store and retrieve blog posts.</p> <p>In the next section, we'll look at how to validate request data.</p>"},{"location":"tutorial/05-request-validation/","title":"5. Request Validation","text":"<p>It's important to validate the data that your API receives. In this section, we'll add validation to our <code>create_post</code> and <code>update_post</code> routes.</p> <p>Artanis has a built-in <code>ValidationError</code> exception that we can use. Let's update our <code>create_post</code> handler to validate the request body.</p> <pre><code># main.py\n# ... (imports)\nfrom artanis.exceptions import ValidationError\n\n# ... (app, startup, middleware)\n\nasync def create_post(request):\n    post_data = await request.json()\n    if not post_data.get(\"title\") or not post_data.get(\"content\"):\n        raise ValidationError(\"Both title and content are required\")\n    with get_db_connection() as db:\n        cursor = db.execute(\n            \"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            (post_data[\"title\"], post_data[\"content\"])\n        )\n        db.commit()\n        return {\"message\": \"Post created\", \"post_id\": cursor.lastrowid}\n\n# ... (update update_post with similar validation)\n\n# ... (add routes)\n\n# ... (rest of the file)\n</code></pre> <p>Now, if you try to create a post without a title or content, you'll get a 400 Bad Request error with a helpful message.</p> <p>For more complex validation scenarios, you can use a library like <code>pydantic</code>.</p> <p>In the next section, we'll learn how to organize our code with routers.</p>"},{"location":"tutorial/06-routers/","title":"6. Organizing Code with Routers","text":"<p>As your application grows, it's a good idea to organize your routes into separate files. Artanis provides a <code>Router</code> class for this purpose.</p> <p>Let's create a new file called <code>posts_router.py</code> and move all of our post-related routes into it.</p> <pre><code># posts_router.py\nfrom artanis import Router\nfrom artanis.exceptions import RouteNotFound, ValidationError\nfrom database import get_db_connection\n\nrouter = Router()\n\nasync def get_posts():\n    # ... (implementation)\n\nasync def create_post(request):\n    # ... (implementation)\n\n# ... (the rest of the post handlers)\n\nrouter.get(\"/posts\", get_posts)\nrouter.post(\"/posts\", create_post)\n# ... (the rest of the post routes)\n</code></pre> <p>Now, update your <code>main.py</code> file to use the new router:</p> <pre><code># main.py\nfrom artanis import App\nfrom database import create_tables\nfrom posts_router import router as posts_router\nimport uvicorn\n\napp = App()\n\nasync def startup():\n    await create_tables()\n\n# Initialize database tables when module loads\nstartup()\n\napp.mount(\"/\", posts_router)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>By using routers, you can keep your <code>main.py</code> file clean and organized, even as your application grows in complexity.</p> <p>This concludes our tutorial on building a simple blog API with Artanis. We hope you've found it helpful!</p>"},{"location":"tutorials/","title":"Artanis Tutorial: Building a Blog API","text":"<p>Welcome to the comprehensive Artanis tutorial! In this step-by-step guide, we'll build a complete Blog API from scratch, covering all the essential concepts you need to master Artanis.</p>"},{"location":"tutorials/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>\u2705 Project Setup - Creating and organizing an Artanis project</li> <li>\u2705 Route Creation - Defining endpoints and handling different HTTP methods</li> <li>\u2705 Middleware - Adding logging, authentication, and error handling</li> <li>\u2705 Database Integration - Connecting to and managing data</li> <li>\u2705 Request Validation - Validating and sanitizing input data</li> <li>\u2705 Code Organization - Using routers for modular applications</li> </ul>"},{"location":"tutorials/#what-well-build","title":"What We'll Build","text":"<p>Our Blog API will include:</p> <ul> <li>\ud83d\udcdd Post Management: Create, read, update, and delete blog posts</li> <li>\ud83d\udc64 User Authentication: Register users and manage sessions</li> <li>\ud83d\udd12 Authorization: Protect endpoints based on user permissions</li> <li>\u2705 Data Validation: Ensure data integrity with validation middleware</li> <li>\ud83d\udcca Request Logging: Track API usage and performance</li> <li>\ud83d\udee1\ufe0f Error Handling: Graceful error responses with proper HTTP status codes</li> </ul>"},{"location":"tutorials/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have:</p> <ul> <li>Python 3.8+ installed</li> <li>Basic Python knowledge (async/await, classes, functions)</li> <li>HTTP/REST API concepts (GET, POST, PUT, DELETE)</li> <li>Artanis installed: <code>pip install artanis uvicorn[standard]</code></li> </ul> <p>New to Python async/await?</p> <p>If you're new to asynchronous Python, don't worry! The tutorial explains async concepts as we go. You can also check out the Python async/await documentation.</p>"},{"location":"tutorials/#tutorial-structure","title":"Tutorial Structure","text":"<p>The tutorial is divided into 6 progressive chapters:</p> <ul> <li> <p>:material-numeric-1-circle:{ .lg .middle } Project Setup</p> <p>Set up your development environment and create the basic project structure</p> <p>Topics: Virtual environments, project structure, basic app setup</p> </li> <li> <p>:material-numeric-2-circle:{ .lg .middle } Creating Routes</p> <p>Learn how to define routes and handle different HTTP methods</p> <p>Topics: Route registration, path parameters, request/response handling</p> </li> <li> <p>:material-numeric-3-circle:{ .lg .middle } Middleware</p> <p>Add powerful middleware for logging, CORS, and error handling</p> <p>Topics: Global middleware, path-based middleware, custom middleware</p> </li> <li> <p>:material-numeric-4-circle:{ .lg .middle } Database Integration</p> <p>Connect to a database and implement data persistence</p> <p>Topics: Database setup, models, CRUD operations</p> </li> <li> <p>:material-numeric-5-circle:{ .lg .middle } Request Validation</p> <p>Validate and sanitize incoming request data</p> <p>Topics: Input validation, error responses, data sanitization</p> </li> <li> <p>:material-numeric-6-circle:{ .lg .middle } Routers</p> <p>Organize your code with modular routers and subrouting</p> <p>Topics: Router classes, subrouting, code organization</p> </li> </ul>"},{"location":"tutorials/#tutorial-flow","title":"Tutorial Flow","text":"<p>Each chapter builds on the previous one:</p> <pre><code>graph TD\n    A[1. Project Setup] --&gt; B[2. Creating Routes]\n    B --&gt; C[3. Middleware]\n    C --&gt; D[4. Database Integration]\n    D --&gt; E[5. Request Validation]\n    E --&gt; F[6. Routers]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n    style E fill:#fce4ec\n    style F fill:#f1f8e9\n</code></pre>"},{"location":"tutorials/#code-examples","title":"Code Examples","text":"<p>All code examples are:</p> <ul> <li>\u2705 Complete and tested - Every snippet has been verified to work</li> <li>\u2705 Progressive - Each example builds on the previous ones</li> <li>\u2705 Explained - Clear explanations of what each part does</li> <li>\u2705 Production-ready - Following best practices and security guidelines</li> </ul>"},{"location":"tutorials/#getting-help","title":"Getting Help","text":"<p>If you get stuck at any point:</p> <ol> <li>Check the code: Each chapter includes complete, working code examples</li> <li>Review the API docs: Detailed documentation for every class and method</li> <li>Ask for help: Open an issue on GitHub</li> <li>Join discussions: Participate in GitHub Discussions</li> </ol>"},{"location":"tutorials/#alternative-learning-paths","title":"Alternative Learning Paths","text":"<p>Depending on your experience level:</p> BeginnerIntermediateAdvanced <p>\ud83d\udcda Follow the tutorial step-by-step</p> <ul> <li>Start with Project Setup</li> <li>Don't skip any chapters</li> <li>Run all code examples</li> <li>Read all explanations</li> </ul> <p>\ud83d\ude80 Focus on advanced topics</p> <ul> <li>Skim through Project Setup and Creating Routes</li> <li>Study Middleware and Database Integration</li> <li>Focus on Request Validation and Routers</li> </ul> <p>\u26a1 Jump to specific topics</p> <ul> <li>Use the tutorial as a reference</li> <li>Focus on Routers for code organization</li> <li>Check out examples for advanced patterns</li> <li>Dive into API documentation</li> </ul> <p>Let's get started! \ud83d\ude80</p> <p>Start Tutorial: Project Setup \u2192</p>"},{"location":"tutorials/01-project-setup/","title":"1. Project Setup","text":"<p>First, let's create a new directory for our project and set up a virtual environment.</p> <pre><code>mkdir artanis-blog-api\ncd artanis-blog-api\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> <p>Next, we'll install Artanis and Uvicorn:</p> <pre><code>pip install artanis uvicorn\n</code></pre> <p>Now, create a new file called <code>main.py</code> and add the following code:</p> <pre><code># main.py\nfrom artanis import App\nimport uvicorn\n\napp = App()\n\nasync def root():\n    return {\"message\": \"Welcome to the Blog API!\"}\n\napp.get(\"/\", root)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre> <p>This is the most basic Artanis application. Let's break it down:</p> <ol> <li>We import the <code>App</code> class from <code>artanis</code>.</li> <li>We create an instance of the <code>App</code> class.</li> <li>We define a handler function <code>root</code>.</li> <li>We register the <code>root</code> handler for GET requests to the <code>/</code> path using <code>app.get()</code>.</li> <li>We use <code>uvicorn</code> to run the application.</li> </ol> <p>To run the application, use the following command:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Now, if you open your browser to <code>http://127.0.0.1:8000</code>, you should see the message <code>{\"message\":\"Welcome to the Blog API!\"}</code>.</p> <p>In the next section, we'll add more routes to our API.</p>"},{"location":"tutorials/02-creating-routes/","title":"2. Creating Routes","text":"<p>In this section, we'll add routes for our blog posts. We'll need routes to:</p> <ul> <li>Get all posts</li> <li>Create a new post</li> <li>Get a single post</li> <li>Update a post</li> <li>Delete a post</li> </ul> <p>For now, we'll use in-memory data. We'll connect to a real database in a later section.</p> <p>Update your <code>main.py</code> file with the following code:</p> <pre><code># main.py\nfrom artanis import App\nfrom artanis.exceptions import RouteNotFound\nimport uvicorn\n\napp = App()\n\n# In-memory database\nposts = {\n    1: {\"title\": \"First Post\", \"content\": \"This is the first post.\"},\n    2: {\"title\": \"Second Post\", \"content\": \"This is the second post.\"},\n}\n\nasync def root():\n    return {\"message\": \"Welcome to the Blog API!\"}\n\nasync def get_posts():\n    return posts\n\nasync def create_post(request):\n    post_data = await request.json()\n    post_id = max(posts.keys()) + 1\n    posts[post_id] = post_data\n    return {\"message\": \"Post created\", \"post_id\": post_id}\n\nasync def get_post(post_id: int):\n    post_id = int(post_id)\n    if post_id not in posts:\n        raise RouteNotFound(f\"Post with ID {post_id} not found\")\n    return posts[post_id]\n\nasync def update_post(post_id: int, request):\n    post_id = int(post_id)\n    if post_id not in posts:\n        raise RouteNotFound(f\"Post with ID {post_id} not found\")\n    post_data = await request.json()\n    posts[post_id] = post_data\n    return {\"message\": f\"Post {post_id} updated\"}\n\nasync def delete_post(post_id: int):\n    post_id = int(post_id)\n    if post_id not in posts:\n        raise RouteNotFound(f\"Post with ID {post_id} not found\")\n    del posts[post_id]\n    return {\"message\": f\"Post {post_id} deleted\"}\n\napp.get(\"/\", root)\napp.get(\"/posts\", get_posts)\napp.post(\"/posts\", create_post)\napp.get(\"/post/{post_id}\", get_post)\napp.put(\"/post/{post_id}\", update_post)\napp.delete(\"/post/{post_id}\", delete_post)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre> <p>Now you can try out the new routes using a tool like <code>curl</code> or an API client like Postman.</p> <p>In the next section, we'll learn how to use middleware for logging and error handling.</p>"},{"location":"tutorials/03-middleware/","title":"3. Middleware","text":"<p>Middleware functions are a powerful feature of Artanis. They can be used to perform actions before or after a request is handled. In this section, we'll add middleware for logging and error handling.</p>"},{"location":"tutorials/03-middleware/#logging-middleware","title":"Logging Middleware","text":"<p>Artanis has a built-in logging system, but let's create our own simple logging middleware to see how it works.</p> <p>Update your <code>main.py</code> file:</p> <pre><code># main.py\nimport time\nfrom artanis import App\nfrom artanis.exceptions import RouteNotFound\nimport uvicorn\n\napp = App()\n\n# In-memory database\nposts = {\n    1: {\"title\": \"First Post\", \"content\": \"This is the first post.\"},\n    2: {\"title\": \"Second Post\", \"content\": \"This is the second post.\"},\n}\n\n# Logging middleware\nasync def logging_middleware(request, response, next):\n    start_time = time.time()\n    await next()\n    process_time = (time.time() - start_time) * 1000\n    print(f\"Request to {request.scope['path']} processed in {process_time:.2f}ms\")\n\napp.use(logging_middleware)\n\n# ... (route handlers)\n\napp.get(\"/\", root)\napp.get(\"/posts\", get_posts)\n# ... (rest of the routes)\n</code></pre> <p>Now, every time you make a request to the API, you'll see a log message in your console.</p>"},{"location":"tutorials/03-middleware/#error-handling-middleware","title":"Error Handling Middleware","text":"<p>Artanis has a built-in exception handling system, but you can also create your own error handling middleware. Let's create a middleware that catches <code>RouteNotFound</code> exceptions and returns a custom error message.</p> <p>Update your <code>main.py</code> file:</p> <pre><code># main.py\nimport time\nfrom artanis import App\nfrom artanis.exceptions import RouteNotFound\nfrom artanis.middleware.exception import ExceptionHandlerMiddleware\nimport uvicorn\n\napp = App()\n\n# In-memory database\nposts = {\n    1: {\"title\": \"First Post\", \"content\": \"This is the first post.\"},\n    2: {\"title\": \"Second Post\", \"content\": \"This is the second post.\"},\n}\n\n# Logging middleware\nasync def logging_middleware(request, response, next):\n    start_time = time.time()\n    await next()\n    process_time = (time.time() - start_time) * 1000\n    print(f\"Request to {request.scope['path']} processed in {process_time:.2f}ms\")\n\napp.use(logging_middleware)\n\n# Error handling middleware\ndef handle_route_not_found(exc, request, response):\n    response.set_status(404)\n    response.json({\"error\": str(exc)})\n    return response\n\nexception_handler = ExceptionHandlerMiddleware()\nexception_handler.add_handler(RouteNotFound, handle_route_not_found)\napp.use(exception_handler)\n\n# ... (route handlers and routes)\n</code></pre> <p>Now, if you try to access a post that doesn't exist (e.g., <code>/posts/99</code>), you'll get a custom 404 error message.</p> <p>In the next section, we'll connect our application to a real database.</p>"},{"location":"tutorials/04-database-integration/","title":"4. Database Integration","text":"<p>In this section, we'll replace our in-memory database with a real SQLite database. We'll use the built-in <code>sqlite3</code> library for simplicity.</p> <p>Note: SQLite operations in Python are synchronous by default. For production applications with high concurrency, consider using <code>aiosqlite</code> for true async database operations.</p> <p>First, let's add the database functions directly to our <code>main.py</code> file:</p> <pre><code># Add these database functions to main.py\nimport sqlite3\n\n# Shared in-memory database connection\n_db_connection = None\n\ndef get_db_connection():\n    global _db_connection\n    if _db_connection is None:\n        _db_connection = sqlite3.connect(\":memory:\", check_same_thread=False)\n    return _db_connection\n\ndef create_tables():\n    with get_db_connection() as db:\n        db.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS posts (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                title TEXT NOT NULL,\n                content TEXT NOT NULL\n            )\n        \"\"\")\n        db.commit()\n</code></pre> <p>Now, update your <code>main.py</code> file to use the database:</p> <pre><code># main.py\nimport time\nfrom artanis import App\nfrom artanis.exceptions import RouteNotFound\nfrom artanis.middleware.exception import ExceptionHandlerMiddleware\nfrom database import get_db_connection, create_tables\nimport uvicorn\n\napp = App()\n\n# Initialize database tables\ncreate_tables()\n\n# ... (middleware)\n\nasync def get_posts():\n    with get_db_connection() as db:\n        cursor = db.execute(\"SELECT id, title, content FROM posts\")\n        rows = cursor.fetchall()\n        return [{\"id\": row[0], \"title\": row[1], \"content\": row[2]} for row in rows]\n\nasync def create_post(request):\n    post_data = await request.json()\n    with get_db_connection() as db:\n        cursor = db.execute(\n            \"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            (post_data[\"title\"], post_data[\"content\"])\n        )\n        db.commit()\n        return {\"message\": \"Post created\", \"post_id\": cursor.lastrowid}\n\n# ... (update get_post, update_post, delete_post to use the database)\n\n# ... (add routes)\n\n# ... (rest of the file)\n</code></pre> <p>Now, your application is using a real database to store and retrieve blog posts.</p> <p>In the next section, we'll look at how to validate request data.</p>"},{"location":"tutorials/05-request-validation/","title":"5. Request Validation","text":"<p>It's important to validate the data that your API receives. In this section, we'll add validation to our <code>create_post</code> and <code>update_post</code> routes.</p> <p>Artanis has a built-in <code>ValidationError</code> exception that we can use. Let's update our <code>create_post</code> handler to validate the request body.</p> <pre><code># main.py\n# ... (imports)\nfrom artanis.exceptions import ValidationError\n\n# ... (app, startup, middleware)\n\nasync def create_post(request):\n    post_data = await request.json()\n    if not post_data.get(\"title\") or not post_data.get(\"content\"):\n        raise ValidationError(\"Both title and content are required\")\n    with get_db_connection() as db:\n        cursor = db.execute(\n            \"INSERT INTO posts (title, content) VALUES (?, ?)\",\n            (post_data[\"title\"], post_data[\"content\"])\n        )\n        db.commit()\n        return {\"message\": \"Post created\", \"post_id\": cursor.lastrowid}\n\n# ... (update update_post with similar validation)\n\n# ... (add routes)\n\n# ... (rest of the file)\n</code></pre> <p>Now, if you try to create a post without a title or content, you'll get a 400 Bad Request error with a helpful message.</p> <p>For more complex validation scenarios, you can use a library like <code>pydantic</code>.</p> <p>In the next section, we'll learn how to organize our code with routers.</p>"},{"location":"tutorials/06-routers/","title":"6. Organizing Code with Routers","text":"<p>As your application grows, it's a good idea to organize your routes into separate files. Artanis provides a <code>Router</code> class for this purpose.</p> <p>Let's create a new file called <code>posts_router.py</code> and move all of our post-related routes into it.</p> <pre><code># posts_router.py\nfrom artanis import Router\nfrom artanis.exceptions import RouteNotFound, ValidationError\nfrom database import get_db_connection\n\nrouter = Router()\n\nasync def get_posts():\n    # ... (implementation)\n\nasync def create_post(request):\n    # ... (implementation)\n\n# ... (the rest of the post handlers)\n\nrouter.get(\"/posts\", get_posts)\nrouter.post(\"/posts\", create_post)\n# ... (the rest of the post routes)\n</code></pre> <p>Now, update your <code>main.py</code> file to use the new router:</p> <pre><code># main.py\nfrom artanis import App\nfrom database import create_tables\nfrom posts_router import router as posts_router\nimport uvicorn\n\napp = App()\n\nasync def startup():\n    await create_tables()\n\n# Initialize database tables when module loads\nstartup()\n\napp.mount(\"/\", posts_router)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>By using routers, you can keep your <code>main.py</code> file clean and organized, even as your application grows in complexity.</p> <p>This concludes our tutorial on building a simple blog API with Artanis. We hope you've found it helpful!</p>"}]}
