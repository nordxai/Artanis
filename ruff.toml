target-version = "py38"
line-length = 88

[lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "PERF", # perflint
    "RUF", # ruff-specific rules
]

ignore = [
    "S101",   # assert detected
    "S311",   # random module for cryptographic purposes
    "PLR0913", # too many arguments to function call
    "PLR2004", # magic value used in comparison
    "PLR0912", # too many branches
    "COM812",  # trailing comma missing (conflicts with formatter)
    "ISC001",  # implicitly concatenated string literals (conflicts with formatter)
    "F401",   # imported but unused (allow re-exports)
    "B904",   # raise from within except
    "BLE001", # blind except Exception
    "FBT001", # boolean typed positional argument
    "FBT002", # boolean default positional argument
    "G004",   # logging statement uses f-string
    "TRY300", # consider moving to else block
    "TRY301", # abstract raise to inner function
    "TRY400", # use logging.exception instead of logging.error
    "TRY401", # redundant exception object in logging.exception
    "C901",   # too complex (function is too complex)
    "SIM102", # use single if statement
    "E501",   # line too long (handled by formatter)
    "DTZ006", # datetime without timezone
    "RUF012", # mutable class attributes
    "PLC0415", # import should be at top-level
    "ERA001", # commented-out code
    "ARG002", # unused method argument
    "N818",   # exception name should end with Error
    "PERF401", # use list comprehension
]

exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "site/",
]

[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[lint.isort]
known-first-party = ["artanis"]
force-single-line = false
force-sort-within-sections = false
split-on-trailing-comma = true

[lint.per-file-ignores]
"tests/*" = [
    "S101",    # assert detected
    "PLR2004", # magic value used in comparison
    "ARG",     # unused function arguments
    "FBT",     # flake8-boolean-trap
    "PLC0415", # import should be at top-level
    "PT018",   # assertion should be broken down
    "A002",    # argument shadowing builtin
    "F841",    # local variable assigned but never used
    "INP001",  # implicit namespace package
    "SLF001",  # private member accessed
    "TRY002",  # create your own exception
]
"docs/*" = [
    "T201",    # print found - allowed in documentation examples
]
"site/*" = [
    "T201",    # print found - allowed in generated documentation examples
]
"src/artanis/cli/*" = [
    "T201",    # print found - needed for CLI user feedback
    "S603",    # subprocess call - needed for CLI tools
    "PLW0603", # global statement - simplified for CLI demo purposes
    "INP001",  # implicit namespace package - templates are standalone
]
"tests/test_cli.py" = [
    "S108",    # hardcoded temp directory in tests
    "SIM117",  # nested with statements - acceptable in tests
    "PTH109",  # os.getcwd should be pathlib - legacy test code
]
